// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var Settings;

  Settings = require("core/settings/settings");
  return describe("Settings", function() {
    var settings;

    settings = null;
    beforeEach(function() {
      return settings = new Settings();
    });
    it('can return a specific sub setting by name', function() {
      var generalSettings;

      console.log(settings);
      generalSettings = settings.getByName("General");
      return expect(generalSettings.get("name")).toBe("General");
    });
    return it('can register a setting class for modular use', function() {
      var TestSettings, _ref;

      TestSettings = (function(_super) {
        __extends(TestSettings, _super);

        function TestSettings() {
          _ref = TestSettings.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        TestSettings.prototype.idAttribute = 'name';

        TestSettings.prototype.defaults = {
          name: "TestSubApp",
          title: "Test Sub App",
          dummySetting: 42
        };

        return TestSettings;

      })(Backbone.Model);
      settings.registerSettingClass("TestSubApp", TestSettings);
      expect(settings.settingNames["TestSubApp"]).toBe(TestSettings);
      return expect(settings.getByName("TestSubApp").get("dummySetting")).toBe(42);
    });
  });
});
