// Generated by CoffeeScript 1.6.2
define(function(require) {
  var AmfExporter, Project, ProjectManager;

  AmfExporter = require("exporters/amfExporter/amfExporter");
  Project = require("core/projects/project");
  ProjectManager = require("core/projects/projectManager");
  return describe("AmfExporter ", function() {
    var amfExporter, project, projectManager;

    projectManager = null;
    project = null;
    amfExporter = null;
    beforeEach(function() {
      projectManager = new ProjectManager();
      project = new Project({
        name: "AProject"
      });
      amfExporter = new AmfExporter();
      return projectManager.project = project;
    });
    it('can export a project to amf (blobUrl)', function() {
      var blobUrl;

      project.addFile({
        name: "AProject.coffee",
        content: "class TestPart extends Part\n  constructor:(options) ->\n    super options\n    @union(new Cylinder(h:300, r:20,$fn:3))\n\ntestPart = new TestPart()\ntestPart2 = new TestPart()\n\nassembly.add(testPart)\nassembly.add(testPart2)"
      });
      projectManager.compileProject();
      blobUrl = amfExporter["export"](project.rootAssembly);
      return expect(blobUrl).not.toBe(null);
    });
    it('triggers an amfExport:error event when export fails', function() {
      var errorArgs, errorCallback;

      project.addFile({
        name: "AProject.coffee"
      });
      errorCallback = jasmine.createSpy('-error event callback-');
      amfExporter.vent.on("amfExport:error", errorCallback);
      amfExporter["export"](project.rootAssembly);
      errorArgs = errorCallback.mostRecentCall.args;
      expect(errorArgs).toBeDefined();
      return expect(errorArgs[0].message).toBe("Failed to merge csgObject children with error: TypeError: Object #<Object> has no method 'clone'");
    });
    return it('returns null when export fails', function() {
      var blobUrl;

      project.addFile({
        name: "AProject.coffee"
      });
      blobUrl = amfExporter["export"](project.rootAssembly);
      return expect(blobUrl).toBe(null);
    });
  });
});
