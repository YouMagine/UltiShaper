// Generated by CoffeeScript 1.6.3
define(function(require) {
  var Project, StlExporter;
  StlExporter = require("exporters/stlExporter/stlExporter");
  Project = require("core/projects/project");
  return describe("StlExporter ", function() {
    var project, stlExporter;
    project = null;
    stlExporter = null;
    beforeEach(function() {
      project = new Project({
        name: "test_project"
      });
      return stlExporter = new StlExporter();
    });
    it('can export a project to stl (blobUrl)', function() {
      var blobUrl;
      project.addFile({
        name: "test_project.coffee",
        content: "class TestPart extends Part\n  constructor:(options) ->\n    super options\n    @union(new Cylinder(h:300, r:20,$fn:3))\n\ntestPart = new TestPart()\nassembly.add(testPart)"
      });
      project.compile();
      blobUrl = stlExporter["export"](project.rootAssembly);
      return expect(blobUrl).not.toBe(null);
    });
    it('triggers an stlExport:error event when export fails', function() {
      var errorArgs, errorCallback;
      project.addFile({
        name: "test_project.coffee"
      });
      errorCallback = jasmine.createSpy('-error event callback-');
      stlExporter.vent.on("stlExport:error", errorCallback);
      stlExporter["export"](project.rootAssembly);
      errorArgs = errorCallback.mostRecentCall.args;
      expect(errorArgs).toBeDefined();
      return expect(errorArgs[0].message).toBe("Failed to merge csgObject children with error: TypeError: Object #<Object> has no method 'clone'");
    });
    return it('returns null when export fails', function() {
      var blobUrl;
      project.addFile({
        name: "testFileName"
      });
      blobUrl = stlExporter["export"](project.rootAssembly);
      return expect(blobUrl).toBe(null);
    });
  });
});
