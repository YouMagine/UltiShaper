// Generated by CoffeeScript 1.6.2
define(function(require) {
  var $, Project, checkDeferred, _;

  $ = require('jquery');
  _ = require('underscore');
  Project = require("core/projects/project");
  checkDeferred = function(df, fn) {
    var callback, errback;

    callback = jasmine.createSpy();
    errback = jasmine.createSpy();
    df.then(callback, errback);
    waitsFor(function() {
      return callback.callCount > 0;
    });
    return runs(function() {
      if (fn) {
        fn.apply(this, callback.mostRecentCall.args);
      }
      return expect(errback).not.toHaveBeenCalled();
    });
  };
  return describe("Project ", function() {
    var compiler, project;

    project = null;
    compiler = null;
    beforeEach(function() {
      return project = new Project({
        name: "Project"
      });
    });
    it('can make new project files', function() {
      project.addFile({
        name: "Project.coffee",
        content: "testContent"
      });
      return expect(project.rootFolder.at(0).name).toBe("Project.coffee");
    });
    it('can remove files from itself', function() {
      var file;

      file = project.addFile({
        name: "testFileName",
        content: "testContent"
      });
      project.removeFile(file);
      return expect(project.rootFolder.length).toBe(0);
    });
    it('can have only one active file at a time (selectable)', function() {
      var activeFile, file, file2;

      file = project.addFile({
        name: "Project.coffee",
        content: "testContent"
      });
      file2 = project.addFile({
        name: "otherFile.coffee",
        content: "testContent"
      });
      activeFile = project.makeFileActive({
        file: file
      });
      expect(activeFile).toEqual(file);
      expect(file.isActive).toBe(true);
      expect(file2.isActive).toBe(false);
      activeFile = project.makeFileActive({
        fileName: file2.name
      });
      expect(activeFile).toEqual(file2);
      expect(file2.isActive).toBe(true);
      expect(file.isActive).toBe(false);
      activeFile = project.makeFileActive(file.name);
      expect(activeFile).toEqual(file);
      expect(file.isActive).toBe(true);
      expect(file2.isActive).toBe(false);
      activeFile = project.makeFileActive(file2);
      expect(activeFile).toEqual(file2);
      expect(file2.isActive).toBe(true);
      return expect(file.isActive).toBe(false);
    });
    it('compiles the contents of its files into an assembly of parts', function() {
      var _this = this;

      project.addFile({
        name: "Project.coffee",
        content: "class TestPart extends Part\n  constructor:(options) ->\n    super options\n    @union(new Cylinder(h:300, r:20,$fn:3))\n\ntestPart = new TestPart()\nassembly.add(testPart)"
      });
      return checkDeferred($.when(project.compile()), function(assembly) {
        return expect(project.rootAssembly.children[0].polygons.length).toBe(9);
      });
    });
    it('generates bom data when compiling', function() {
      var _this = this;

      project.addFile({
        name: "Project.coffee",
        content: "class SubPart extends Part\n  constructor:(options)->\n    super options\n  \nclass TestPart extends Part\n  constructor:(options) ->\n    super options\n    @union(new Cylinder(h:300, r:20,$fn:3))\n    @add(new SubPart())\n    @add(new SubPart()) \n\ntestPart = new TestPart()\nassembly.add(testPart)"
      });
      /*
      expBom = new Backbone.Collection()
      expPart = new Backbone.Model
        included: true
        manufactured: true
        name: "TestPart"
        params: ""
        quantity: 2
        variant: "Default"
      expBom.add  expPart
      */

      return checkDeferred($.when(project.compile()), function(assembly) {
        return expect(JSON.stringify(project.bom)).toEqual('[{"name":"TestPart","variant":"Default","params":"","quantity":1,"manufactured":true,"included":true},{"name":"SubPart","variant":"Default","params":"","quantity":2,"manufactured":true,"included":true}]');
      });
    });
    it('handles variants (different options) for parts in bom data correctly', function() {
      var _this = this;

      project.addFile({
        name: "Project.coffee",
        content: "class TestPart extends Part\n  constructor:(options) ->\n    defaults = {thickness:5}\n    {@thickness} = options = merge(defaults, options)\n    super options\n    @union(new Cylinder(h:@thickness, r:20,$fn:3))\n\ntestPart = new TestPart()\ntestPartVar2 = new TestPart({thickness:15})\nassembly.add(testPart)\nassembly.add(testPartVar2)"
      });
      return checkDeferred($.when(project.compile()), function(assembly) {
        return expect(JSON.stringify(project.bom)).toEqual('[{"name":"TestPart","variant":"","params":"{\\"thickness\\":5}","quantity":1,"manufactured":true,"included":true},{"name":"TestPart","variant":"","params":"{\\"thickness\\":15}","quantity":1,"manufactured":true,"included":true}]');
      });
    });
    it('handles variants (different options) for parts in bom data correctly (background processing)', function() {
      var _this = this;

      project.addFile({
        name: "Project.coffee",
        content: "class TestPart extends Part\n  constructor:(options) ->\n    defaults = {thickness:5}\n    {@thickness} = options = merge(defaults, options)\n    super options\n    @union(new Cylinder(h:@thickness, r:20,$fn:3))\n\ntestPart = new TestPart()\ntestPartVar2 = new TestPart({thickness:15})\nassembly.add(testPart)\nassembly.add(testPartVar2)"
      });
      return checkDeferred($.when(project.compile({
        backgroundProcessing: true
      })), function(assembly) {
        return expect(JSON.stringify(project.bom)).toEqual('[{"name":"TestPart","variant":"","params":"{\\"thickness\\":5}","quantity":1,"manufactured":true,"included":true},{"name":"TestPart","variant":"","params":"{\\"thickness\\":15}","quantity":1,"manufactured":true,"included":true}]');
      });
    });
    return it('is marked as "dirty" when one of its files gets modified', function() {
      var mainFile;

      expect(project.isCompileAdvised).toBe(false);
      project.addFile({
        name: "test_project",
        content: "class TestPart extends Part\n  constructor:(options) ->\n    super options\n    @union(new Cylinder(h:300, r:20,$fn:3))\n\n\ntestPart = new TestPart()\nassembly.add(testPart)"
      });
      project.isCompileAdvised = false;
      mainFile = project.rootFolder.get("test_project");
      mainFile.content = "";
      return expect(project.isCompileAdvised).toBe(true);
    });
  });
  /* 
  describe "projectFile", ->
   project = null
   part = null
   
   beforeEach ->
     project = new Project
       name:"test_project"
     part = new ProjectFile
       name: "test_part"
       ext: "coscad"
       content: "" 
     project.add part  
   
   afterEach ->
     part.destroy()
     localStorage.removeItem("Library-test_project")
     localStorage.removeItem("Library-test_project-parts")
     
   
   it 'flags itself as isCompileAdvised on change' , ->  
     part.content="DummyContent"
     expect(part.isCompileAdvised).toBe true
     
   it 'flags itself as not isCompileAdvised on save' , ->  
     part.content="DummyContent"
     part.save()
     expect(part.isCompileAdvised).toBe false
  */

});
