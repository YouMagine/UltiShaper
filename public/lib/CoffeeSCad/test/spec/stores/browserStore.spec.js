// Generated by CoffeeScript 1.6.2
define(function(require) {
  var BrowserStore, Project;

  Project = require("core/projects/project");
  BrowserStore = require('stores/browser/browserStore2');
  return describe("browserStore", function() {
    var browserStore, project;

    project = null;
    browserStore = null;
    beforeEach(function() {
      project = new Project({
        name: "TestProject"
      });
      project.addFile({
        name: "TestProject.coffee",
        content: "bla bla"
      });
      browserStore = new BrowserStore({
        rootUri: "projectsTest"
      });
      return browserStore.setup();
    });
    afterEach(function() {
      localStorage.removeItem("projectsTest/TestProject/TestProject.coffee");
      localStorage.removeItem("projectsTest/TestProject/SomeOtherFile.coffee");
      localStorage.removeItem("projectsTest/TestProject/.thumbnail.png");
      localStorage.removeItem("projectsTest/TestProject");
      localStorage.removeItem("projectsTest/FooProject/FooProject.coffee");
      localStorage.removeItem("projectsTest/FooProject/SomeOtherFile.coffee");
      localStorage.removeItem("projectsTest/FooProject/.thumbnail.png");
      localStorage.removeItem("projectsTest/FooProject");
      return localStorage.removeItem("projectsTest");
    });
    it('can save projects', function() {
      var expLocalStorageData, obsLocalStorageData;

      browserStore.saveProject(project);
      obsLocalStorageData = localStorage.getItem("projectsTest/TestProject/TestProject.coffee");
      expLocalStorageData = "{\"name\":\"TestProject.coffee\",\"content\":\"bla bla\",\"isActive\":false,\"isSaveAdvised\":false,\"isCompileAdvised\":false}";
      expect(obsLocalStorageData).toEqual(expLocalStorageData);
      return localStorage.removeItem("projectsTest/TestProject/TestProject.coffee");
    });
    it('can load projects', function() {
      var fileData;

      fileData = "{\"name\":\"TestProject.coffee\",\"content\":\"bla bla\",\"isActive\":false,\"isSaveAdvised\":false,\"isCompileAdvised\":false}";
      localStorage.setItem("projectsTest/TestProject/TestProject.coffee", fileData);
      localStorage.setItem("projectsTest/TestProject", ["TestProject.coffee", "SomeOtherFile.coffee"]);
      return project = browserStore.loadProject("TestProject");
    });
    it('can list projects', function() {
      var expProjectsList, obsProjectsList;

      browserStore.saveProject(project);
      obsProjectsList = browserStore.listProjects();
      expProjectsList = ["TestProject"];
      return expect(obsProjectsList).toEqual(expProjectsList);
    });
    it('can list a project s files', function() {
      var expProjectsList, obsProjectsList;

      browserStore.saveProject(project);
      obsProjectsList = browserStore.listProjectFiles(project.name);
      expProjectsList = ["TestProject.coffee"];
      return expect(obsProjectsList).toEqual(expProjectsList);
    });
    it('can rename/move projects', function() {
      browserStore.saveProject(project);
      browserStore.renameProject("TestProject", "FooProject");
      expect(localStorage.getItem("projectsTest/TestProject")).toEqual(null);
      expect(localStorage.getItem("projectsTest/TestProject/TestProject.coffee")).toEqual(null);
      expect(localStorage.getItem("projectsTest/FooProject")).toEqual("FooProject.coffee");
      return expect(localStorage.getItem("projectsTest/FooProject/FooProject.coffee")).not.toEqual(null);
    });
    it('can delete projects by name', function() {
      var expStorageData, obsStorageData;

      browserStore.saveProject(project);
      browserStore.deleteProject("TestProject");
      expStorageData = null;
      obsStorageData = localStorage.getItem("projectsTest" + "TestProject");
      expect(obsStorageData).toEqual(expStorageData);
      expStorageData = null;
      obsStorageData = localStorage.getItem("projectsTest/TestProject/TestProject.coffee");
      return expect(obsStorageData).toEqual(expStorageData);
    });
    return it("provides a shorthand to get a project's thumbnail", function() {
      var expThumbnail, obsthumbnail;

      project.addFile({
        name: ".thumbnail.png",
        content: "beautifull image"
      });
      browserStore.saveProject(project);
      obsthumbnail = browserStore.getThumbNail("TestProject");
      expThumbnail = "beautifull image";
      return expect(obsthumbnail).toEqual(expThumbnail);
    });
  });
});
