// Generated by CoffeeScript 1.6.3
define(function(require) {
  var $, BrowserStore, PreProcessor, Project, checkDeferred, _;
  $ = require('jquery');
  _ = require('underscore');
  Project = require("core/projects/project");
  PreProcessor = require("core/projects/preprocessor");
  BrowserStore = require("stores/browser/browserStore");
  checkDeferred = function(df, fn) {
    var callback;
    callback = jasmine.createSpy();
    df.then(callback);
    waitsFor(function() {
      return callback.callCount > 0;
    });
    return runs(function() {
      if (fn) {
        return fn.apply(this, callback.mostRecentCall.args);
      }
    });
  };
  return describe("PreProcessor", function() {
    var preprocessor, project;
    project = null;
    preprocessor = null;
    beforeEach(function() {
      project = new Project({
        name: "TestProject"
      });
      return preprocessor = new PreProcessor();
    });
    it('throws an error if there is no correctly named main file', function() {
      project.addFile({
        name: "NotTheRightName.coffee",
        content: ""
      });
      return expect(function() {
        return preprocessor.process(project);
      }).toThrow("Missing main file (needs to have the same name as the project containing it)");
    });
    it('can check for circular dependency issues and raise an exception', function() {
      project.addFile({
        name: "TestProject.coffee",
        content: "include (\"config.coffee\")"
      });
      project.addFile({
        name: "config.coffee",
        content: "include (\"someOtherFile.coffee\")"
      });
      project.addFile({
        name: "someOtherFile.coffee",
        content: "include (\"TestProject.coffee\")"
      });
      return expect(function() {
        return preprocessor.process(project);
      }).toThrow("Circular dependency detected from someOtherFile.coffee to TestProject.coffee");
    });
    it('can emulate coffeescript function syntax (with or without parens) (as it is a "pseudo method") for includes', function() {
      var expPreProcessedSource,
        _this = this;
      project.addFile({
        name: "TestProject.coffee",
        content: "include (\"config.coffee\")"
      });
      project.addFile({
        name: "config.coffee",
        content: "testVariable = 42"
      });
      expPreProcessedSource = "\ntestVariable = 42\n";
      return checkDeferred($.when(preprocessor.process(project)), function(obsPreprocessedSource) {
        return expect(obsPreprocessedSource).toBe(expPreProcessedSource);
      });
    });
    it('can process file includes from the current project (simple)', function() {
      var expPreProcessedSource,
        _this = this;
      project.addFile({
        name: "TestProject.coffee",
        content: "include (\"config.coffee\")\nmainVariable = testVariable+2"
      });
      project.addFile({
        name: "config.coffee",
        content: "testVariable = 42"
      });
      expPreProcessedSource = "\ntestVariable = 42\n\nmainVariable = testVariable+2";
      return checkDeferred($.when(preprocessor.process(project)), function(obsPreprocessedSource) {
        return expect(obsPreprocessedSource).toBe(expPreProcessedSource);
      });
    });
    it('can process file includes from the current project (complex)', function() {
      var expPreProcessedSource,
        _this = this;
      project.addFile({
        name: "TestProject.coffee",
        content: "include \"config.coffee\"\ninclude \"file1.coffee\"\ninclude \"file2.coffee\"\ninclude \"file3.coffee\"\nmainVariable = testVariable+2"
      });
      project.addFile({
        name: "config.coffee",
        content: "testVariable = 42"
      });
      project.addFile({
        name: "file1.coffee",
        content: "include \"config.coffee\"\na=1"
      });
      project.addFile({
        name: "file2.coffee",
        content: "include \"config.coffee\"\nb=2"
      });
      project.addFile({
        name: "file3.coffee",
        content: "include \"config.coffee\"\nc=3"
      });
      expPreProcessedSource = "\ntestVariable = 42\n\na=1\n\nb=2\n\nc=3\n\nmainVariable = testVariable+2";
      return checkDeferred($.when(preprocessor.process(project)), function(obsPreprocessedSource) {
        return expect(obsPreprocessedSource).toBe(expPreProcessedSource);
      });
    });
    it('can process file includes from another project (browserStore) single level', function() {
      var browserStore, expPreProcessedSource, otherProject,
        _this = this;
      project.addFile({
        name: "TestProject.coffee",
        content: "include (\"config.coffee\")\ninclude (\"browser:OtherProject/OtherProject.coffee\")\nmainVariable = testVariable+2"
      });
      project.addFile({
        name: "config.coffee",
        content: "testVariable = 42"
      });
      otherProject = new Project({
        name: "OtherProject"
      });
      otherProject.addFile({
        name: "OtherProject.coffee",
        content: "otherProjectVariable = 666"
      });
      browserStore = new BrowserStore({
        storeURI: "testStore"
      });
      browserStore.saveProject(otherProject);
      expPreProcessedSource = "\ntestVariable = 42\n\notherProjectVariable = 666\n\nmainVariable = testVariable+2";
      return checkDeferred($.when(preprocessor.process(project)), function(obsPreprocessedSource) {
        return expect(obsPreprocessedSource).toBe(expPreProcessedSource);
      });
    });
    return it('can process file includes from another project (browserStore) multi level', function() {
      var browserStore, expPreProcessedSource, otherProject,
        _this = this;
      project.addFile({
        name: "TestProject.coffee",
        content: "include (\"config.coffee\")\ninclude (\"browser:OtherProject/OtherProject.coffee\")\nmainVariable = testVariable+2"
      });
      project.addFile({
        name: "config.coffee",
        content: "testVariable = 42"
      });
      otherProject = new Project({
        name: "OtherProject"
      });
      otherProject.addFile({
        name: "OtherProject.coffee",
        content: "otherProjectVariable = 666\ninclude(\"config.coffee\")"
      });
      otherProject.addFile({
        name: "config.coffee",
        content: "secondLevelIncludeVar = 24"
      });
      browserStore = new BrowserStore({
        storeURI: "testStore"
      });
      browserStore.saveProject(otherProject);
      expPreProcessedSource = "\ntestVariable = 42\n\notherProjectVariable = 666\nsecondLevelIncludeVar = 24\n\n\n\nmainVariable = testVariable+2";
      return checkDeferred($.when(preprocessor.process(project)), function(obsPreprocessedSource) {
        return expect(obsPreprocessedSource).toBe(expPreProcessedSource);
      });
    });
    /*
    it 'can process project includes',->
      project.addFile
        name:"TestProject.coffee"
        content:"""include ("browser:OtherProject")
        mainVariable = testVariable+2
        """
      
      browserStore = new BrowserStore({storeURI:"testStore"})
      
      otherProject = new Project({name:"OtherProject"})
      otherProject.addFile
        name:"OtherProject.coffee"
        content:"""
        class Test extends Part
          constructor:(options)->
            super options
            @union( new Cube({size:200}))
            
        mainVariable = testVariable+2
        """
      browserStore.saveProject(otherProject)
      
      expPreProcessedSource = """
      
      OtherProject = {"OtherProject.coffee":{}}
      
      mainVariable = testVariable+2
      """
      
      obsPreprocessedSource = preprocessor.process(project)
      expect(obsPreprocessedSource).toBe(expPreProcessedSource)
    */

    /*
    it 'can process local stl file includes',->
      project.addFile
        name:"TestProject"
        content:"""include ("toto.stl")"""
    */

  });
});
