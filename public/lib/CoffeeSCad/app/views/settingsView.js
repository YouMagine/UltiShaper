// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var $, EditorSettingsForm, EditorSettingsWrapper, GeneralSettingsForm, GeneralSettingsWrapper, GitHubSettingsForm, GitHubSettingsWrapper, GlViewSettingsForm, GlViewSettingsWrapper, SettingContent, SettingContentItemView, SettingHeader, SettingHeaderItemView, SettingsView, boostrap, forms, forms_bstrap, marionette, s_template, sc_template, sca_template, sh_template, sha_template, _;
    $ = require('jquery');
    _ = require('underscore');
    boostrap = require('bootstrap');
    marionette = require('marionette');
    forms = require('forms');
    forms_bstrap = require('forms_bootstrap');
    s_template = require("text!templates/settings.tmpl");
    sh_template = require("text!templates/settingsHeader.tmpl");
    sha_template = require("text!templates/settingsHeaderAll.tmpl");
    sc_template = require("text!templates/settingsContent.tmpl");
    sca_template = require("text!templates/settingsContentAll.tmpl");
    SettingHeaderItemView = (function(_super) {

      __extends(SettingHeaderItemView, _super);

      function SettingHeaderItemView() {
        return SettingHeaderItemView.__super__.constructor.apply(this, arguments);
      }

      SettingHeaderItemView.prototype.template = sh_template;

      SettingHeaderItemView.prototype.tagName = "li";

      return SettingHeaderItemView;

    })(Backbone.Marionette.ItemView);
    SettingHeader = (function(_super) {

      __extends(SettingHeader, _super);

      SettingHeader.prototype.itemView = SettingHeaderItemView;

      SettingHeader.prototype.tagName = "ul";

      SettingHeader.prototype.template = sha_template;

      SettingHeader.prototype.itemViewContainer = "#settingsHeaderUl";

      SettingHeader.prototype.ui = {
        globalContainer: "#settingsHeaderUl"
      };

      function SettingHeader(options) {
        this.onRender = __bind(this.onRender, this);
        SettingHeader.__super__.constructor.call(this, options);
      }

      SettingHeader.prototype.onRender = function() {
        return $(this.ui.globalContainer).find('li:first').tab('show');
      };

      return SettingHeader;

    })(Backbone.Marionette.CompositeView);
    SettingContentItemView = (function(_super) {

      __extends(SettingContentItemView, _super);

      function SettingContentItemView() {
        this.onRender = __bind(this.onRender, this);
        return SettingContentItemView.__super__.constructor.apply(this, arguments);
      }

      SettingContentItemView.prototype.template = sc_template;

      SettingContentItemView.prototype.onRender = function() {
        this.$el.addClass("tab-pane");
        this.$el.addClass("fade");
        return this.$el.attr('id', this.model.get("name"));
      };

      return SettingContentItemView;

    })(Backbone.Marionette.ItemView);
    SettingContent = (function(_super) {

      __extends(SettingContent, _super);

      SettingContent.prototype.itemView = SettingContentItemView;

      SettingContent.prototype.template = sca_template;

      SettingContent.prototype.itemViewContainer = "#settingsContentAll";

      function SettingContent(options) {
        this.onRender = __bind(this.onRender, this);

        this.getItemView = __bind(this.getItemView, this);
        SettingContent.__super__.constructor.call(this, options);
        this.forms = [];
        this.specificViews = {
          "GeneralSettings": GeneralSettingsWrapper,
          "GlViewSettings": GlViewSettingsWrapper,
          "EditorSettings": EditorSettingsWrapper,
          "GitHubSettings": GitHubSettingsWrapper
        };
      }

      SettingContent.prototype.getItemView = function(item) {
        var view;
        view = SettingContentItemView;
        if (item != null) {
          try {
            if (this.specificViews.hasOwnProperty(item.constructor.name)) {
              view = this.specificViews[item.constructor.name];
            }
          } catch (error) {
            console.log("error: " + error);
          }
        }
        return view;
      };

      SettingContent.prototype.onRender = function() {
        var childView, index, _ref, _results;
        _ref = this.children;
        _results = [];
        for (index in _ref) {
          childView = _ref[index];
          if (childView.wrappedForm != null) {
            _results.push(this.forms.push(childView.wrappedForm));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      return SettingContent;

    })(Backbone.Marionette.CompositeView);
    SettingsView = (function(_super) {

      __extends(SettingsView, _super);

      SettingsView.prototype.template = s_template;

      SettingsView.prototype.regions = {
        tabHeaders: "#tabHeaders",
        tabContent: "#tabContent"
      };

      SettingsView.prototype.ui = {
        tabHeaders: "#tabHeaders",
        tabContent: "#tabContent"
      };

      SettingsView.prototype.events = {
        "mouseup .applySettings": "applySettings"
      };

      SettingsView.prototype.applySettings = function(ev) {
        var form, index, _ref;
        _ref = this.tabContent.currentView.forms;
        for (index in _ref) {
          form = _ref[index];
          form.commit();
        }
        return this.model.save();
      };

      function SettingsView(options) {
        this.onRender = __bind(this.onRender, this);

        this.applySettings = __bind(this.applySettings, this);
        SettingsView.__super__.constructor.call(this, options);
        this.app = require('app');
      }

      SettingsView.prototype.onRender = function() {
        var defaultItem, sContentView, sHeaderView;
        sHeaderView = new SettingHeader({
          collection: this.model
        });
        this.tabHeaders.show(sHeaderView);
        sContentView = new SettingContent({
          collection: this.model
        });
        this.tabContent.show(sContentView);
        $(this.ui.tabHeaders).find('li:first').addClass('active');
        defaultItem = $(this.ui.tabContent).find('div .tab-pane:first');
        defaultItem.addClass('active');
        return defaultItem.removeClass('fade');
      };

      return SettingsView;

    })(Backbone.Marionette.Layout);
    GeneralSettingsForm = (function(_super) {

      __extends(GeneralSettingsForm, _super);

      function GeneralSettingsForm(options) {
        if (!options.schema) {
          options.schema = {
            maxRecentFilesDisplay: {
              type: 'Number',
              title: 'Nb of recent files to display (Feature N/A)'
            }
          };
        }
        GeneralSettingsForm.__super__.constructor.call(this, options);
      }

      return GeneralSettingsForm;

    })(Backbone.Form);
    GeneralSettingsWrapper = (function(_super) {

      __extends(GeneralSettingsWrapper, _super);

      function GeneralSettingsWrapper(options) {
        this.render = __bind(this.render, this);
        GeneralSettingsWrapper.__super__.constructor.call(this, options);
        this.wrappedForm = new GeneralSettingsForm({
          model: this.model
        });
      }

      GeneralSettingsWrapper.prototype.render = function() {
        var tmp;
        tmp = this.wrappedForm.render();
        this.$el.append(tmp.el);
        this.$el.addClass("tab-pane");
        this.$el.addClass("fade");
        this.$el.attr('id', this.model.get("name"));
        return this.el;
      };

      return GeneralSettingsWrapper;

    })(Backbone.Marionette.ItemView);
    GlViewSettingsForm = (function(_super) {

      __extends(GlViewSettingsForm, _super);

      function GlViewSettingsForm(options) {
        if (!options.schema) {
          options.schema = {
            csgRenderMode: {
              title: "Render trigger mode",
              type: 'Select',
              options: ["onDemand", "onCodeChange", "onCodeChangeDelayed", "onSave"]
            },
            csgRenderDelay: {
              type: 'Number'
            },
            renderer: {
              type: 'Select',
              options: ["webgl", "canvas"]
            },
            antialiasing: 'Checkbox',
            shadows: 'Checkbox',
            selfShadows: {
              type: 'Checkbox',
              title: 'Object self shadowing'
            },
            showAxes: 'Checkbox',
            showGrid: 'Checkbox',
            gridSize: 'Number',
            gridStep: 'Number',
            gridColor: 'Text',
            gridOpacity: 'Number',
            showStats: 'Checkbox',
            position: {
              type: 'Select',
              options: ['diagonal', 'top', 'bottom', 'front', 'back', 'left', 'right', 'center']
            },
            projection: {
              type: 'Select',
              options: ['perspective', 'orthographic']
            },
            center: 'Checkbox',
            wireframe: 'Checkbox',
            helpersColor: 'Text',
            bgColor: {
              title: "background color",
              type: 'Text'
            },
            bgColor2: {
              title: "background color2 (gradient)",
              type: 'Text'
            }
          };
          options.fieldsets = [
            {
              "legend": "CsgRender settings",
              "fields": ["csgRenderMode", "csgRenderDelay"]
            }, {
              "legend": "Render settings",
              "fields": ["renderer", "antialiasing", "shadows", "selfShadows"]
            }, {
              "legend": "View settings",
              "fields": ["position", "projection", "center", "wireframe"]
            }, {
              "legend": "Axes and Grid settings",
              "fields": ["showAxes", "helpersColor", "showGrid", "gridSize", "gridStep", "gridColor", "gridOpacity"]
            }, {
              "legend": "Extra settings",
              "fields": ["bgColor", "bgColor2", "showStats"]
            }
          ];
        }
        GlViewSettingsForm.__super__.constructor.call(this, options);
      }

      return GlViewSettingsForm;

    })(Backbone.Form);
    GlViewSettingsWrapper = (function(_super) {

      __extends(GlViewSettingsWrapper, _super);

      GlViewSettingsWrapper.prototype.events = {
        'change #c6_csgRenderMode': "tutu"
      };

      function GlViewSettingsWrapper(options) {
        this.tutu = __bind(this.tutu, this);

        this.render = __bind(this.render, this);
        GlViewSettingsWrapper.__super__.constructor.call(this, options);
        this.wrappedForm = new GlViewSettingsForm({
          model: this.model
        });
      }

      GlViewSettingsWrapper.prototype.ui = {
        csgRenderMode: "#c6_csgRenderMode"
      };

      GlViewSettingsWrapper.prototype.render = function() {
        var tmp;
        if (this.beforeRender) {
          this.beforeRender();
        }
        this.trigger("before:render", this);
        this.trigger("item:before:render", this);
        tmp = this.wrappedForm.render();
        this.$el.append(tmp.el);
        this.$el.addClass("tab-pane");
        this.$el.addClass("fade");
        this.$el.attr('id', this.model.get("name"));
        this.bindUIElements();
        if (this.onRender) {
          this.onRender();
        }
        this.trigger("render", this);
        this.trigger("item:rendered", this);
        return this;
      };

      GlViewSettingsWrapper.prototype.tutu = function(bla) {
        console.log(bla);
        return console.log("gne INDEED");
      };

      return GlViewSettingsWrapper;

    })(Backbone.Marionette.ItemView);
    EditorSettingsForm = (function(_super) {

      __extends(EditorSettingsForm, _super);

      function EditorSettingsForm(options) {
        if (!options.schema) {
          options.schema = {
            startLine: 'Number'
          };
        }
        EditorSettingsForm.__super__.constructor.call(this, options);
      }

      return EditorSettingsForm;

    })(Backbone.Form);
    EditorSettingsWrapper = (function(_super) {

      __extends(EditorSettingsWrapper, _super);

      function EditorSettingsWrapper(options) {
        this.render = __bind(this.render, this);
        EditorSettingsWrapper.__super__.constructor.call(this, options);
        this.wrappedForm = new EditorSettingsForm({
          model: this.model
        });
      }

      EditorSettingsWrapper.prototype.render = function() {
        var tmp;
        tmp = this.wrappedForm.render();
        this.$el.append(tmp.el);
        this.$el.addClass("tab-pane");
        this.$el.addClass("fade");
        this.$el.attr('id', this.model.get("name"));
        return this.el;
      };

      return EditorSettingsWrapper;

    })(Backbone.Marionette.ItemView);
    GitHubSettingsForm = (function(_super) {

      __extends(GitHubSettingsForm, _super);

      function GitHubSettingsForm(options) {
        if (!options.schema) {
          options.schema = {
            'configured': {
              type: 'Checkbox',
              title: 'Configured (Feature N/A)'
            }
          };
        }
        GitHubSettingsForm.__super__.constructor.call(this, options);
      }

      return GitHubSettingsForm;

    })(Backbone.Form);
    GitHubSettingsWrapper = (function(_super) {

      __extends(GitHubSettingsWrapper, _super);

      function GitHubSettingsWrapper(options) {
        this.render = __bind(this.render, this);
        GitHubSettingsWrapper.__super__.constructor.call(this, options);
        this.wrappedForm = new GitHubSettingsForm({
          model: this.model
        });
      }

      GitHubSettingsWrapper.prototype.render = function() {
        var tmp;
        tmp = this.wrappedForm.render();
        this.$el.append(tmp.el);
        this.$el.addClass("tab-pane");
        this.$el.addClass("fade");
        this.$el.attr('id', this.model.get("name"));
        return this.el;
      };

      return GitHubSettingsWrapper;

    })(Backbone.Marionette.ItemView);
    return SettingsView;
  });

}).call(this);
