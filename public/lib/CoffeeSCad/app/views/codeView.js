// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require) {
    var $, CodeEditorView, CodeMirror, CoffeeScript, codeEdit_template, marionette, _;
    $ = require('jquery');
    _ = require('underscore');
    require('bootstrap');
    marionette = require('marionette');
    CodeMirror = require('CodeMirror');
    require('foldcode');
    require('coffee_synhigh');
    require('match_high');
    require('search');
    require('dialog');
    CoffeeScript = require('CoffeeScript');
    require('coffeelint');
    codeEdit_template = require("text!templates/codeedit.tmpl");
    CodeEditorView = (function(_super) {

      __extends(CodeEditorView, _super);

      CodeEditorView.prototype.template = codeEdit_template;

      CodeEditorView.prototype.ui = {
        codeBlock: "#codeArea",
        errorBlock: "#errorConsole"
      };

      function CodeEditorView(options) {
        this.onRender = __bind(this.onRender, this);

        this.redo = __bind(this.redo, this);

        this.undo = __bind(this.undo, this);

        this.updateUndoRedo = __bind(this.updateUndoRedo, this);

        this.updateHints = __bind(this.updateHints, this);

        this.showError = __bind(this.showError, this);

        this.settingsChanged = __bind(this.settingsChanged, this);

        this.modelSaved = __bind(this.modelSaved, this);

        this.modelChanged = __bind(this.modelChanged, this);
        CodeEditorView.__super__.constructor.call(this, options);
        this.settings = options.settings;
        this.editor = null;
        this.markers = [];
        this.lintConf = {
          "max_line_length": {
            "value": 80,
            "level": "warning"
          },
          "no_tabs": {
            "level": "warning"
          },
          "indentation": {
            "value": 2,
            "level": "ignore"
          }
        };
        this.app = require('app');
        this.bindTo(this.model, "change", this.modelChanged);
        this.bindTo(this.model, "saved", this.modelSaved);
        this.bindTo(this.settings, "change", this.settingsChanged);
        this.app.vent.bind("csgParseError", this.showError);
      }

      CodeEditorView.prototype.switchModel = function(newModel) {
        this.model = newModel;
        this.editor.setValue(this.model.get("content"));
        this.app.vent.trigger("clearUndoRedo", this);
        this.editor.clearHistory();
        this.bindTo(this.model, "change", this.modelChanged);
        return this.bindTo(this.model, "saved", this.modelSaved);
      };

      CodeEditorView.prototype.modelChanged = function(model, value) {
        $(this.ui.errorBlock).addClass("well");
        $(this.ui.errorBlock).removeClass("alert alert-error");
        $(this.ui.errorBlock).html("");
        this.app.vent.trigger("modelChanged", this);
        return $("[rel=tooltip]").tooltip({
          placement: 'bottom'
        });
      };

      CodeEditorView.prototype.modelSaved = function(model) {};

      CodeEditorView.prototype.settingsChanged = function(settings, value) {
        var key, val, _ref, _results;
        console.log("Settings changed");
        _ref = this.settings.changedAttributes();
        _results = [];
        for (key in _ref) {
          val = _ref[key];
          switch (key) {
            case "startLine":
              this.editor.setOption("firstLineNumber", val);
              _results.push(this.render());
              break;
            default:
              _results.push(void 0);
          }
        }
        return _results;
      };

      CodeEditorView.prototype.showError = function(error) {
        var errLine, errMsg;
        try {
          $(this.ui.errorBlock).removeClass("well");
          $(this.ui.errorBlock).addClass("alert alert-error");
          $(this.ui.errorBlock).html("<div> <h4>" + error.name + ":</h4>  " + error.message + "</div>");
          errLine = error.message.split("line ");
          errLine = errLine[errLine.length - 1];
          return errMsg = error.message;
        } catch (err) {
          console.log("Inner err: " + err);
          return $(this.ui.errorBlock).text(error);
        }
      };

      CodeEditorView.prototype.updateHints = function() {
        var i, marker, _ref,
          _this = this;
        _ref = this.markers;
        for (i in _ref) {
          marker = _ref[i];
          this.editor.clearMarker(marker);
        }
        this.markers = [];
        return this.editor.operation(function() {
          var errLine, errMsg, error, errors, markerDiv, _results;
          try {
            errors = coffeelint.lint(_this.editor.getValue(), _this.lintConf);
            _results = [];
            for (i in errors) {
              error = errors[i];
              errMsg = error.message;
              markerDiv = "<span class='CodeErrorMarker'> <a href='#' rel='tooltip' title=\" " + errMsg + "\" > <i class='icon-remove-sign'></i></a></span> %N%";
              marker = _this.editor.setMarker(error.lineNumber - 1, markerDiv);
              _results.push(_this.markers.push(marker));
            }
            return _results;
          } catch (error) {
            errLine = error.message.split("line ");
            errLine = errLine[errLine.length - 1];
            errMsg = error.message;
            markerDiv = "<span class='CodeErrorMarker'> <a href='#' rel='tooltip' title=\" " + errMsg + "\" > <i class='icon-remove-sign'></i></a></span> %N%";
            try {
              marker = _this.editor.setMarker(errLine - 1, markerDiv);
              return _this.markers.push(marker);
            } catch (error) {
              return console.log("ERROR " + error + " in adding error marker");
            }
          }
        });
      };

      CodeEditorView.prototype.updateUndoRedo = function() {
        var redos, undos;
        redos = this.editor.historySize().redo;
        undos = this.editor.historySize().undo;
        if (redos > 0) {
          this.app.vent.trigger("redoAvailable", this);
        } else {
          this.app.vent.trigger("redoUnAvailable", this);
        }
        if (undos > 0) {
          return this.app.vent.trigger("undoAvailable", this);
        } else {
          return this.app.vent.trigger("undoUnAvailable", this);
        }
      };

      CodeEditorView.prototype.undo = function() {
        var undoes;
        undoes = this.editor.historySize().undo;
        if (undoes > 0) {
          return this.editor.undo();
        }
      };

      CodeEditorView.prototype.redo = function() {
        var redoes;
        redoes = this.editor.historySize().redo;
        if (redoes > 0) {
          return this.editor.redo();
        }
      };

      CodeEditorView.prototype.onRender = function() {
        var foldFunc,
          _this = this;
        foldFunc = CodeMirror.newFoldFunction(CodeMirror.indentRangeFinder);
        this.editor = CodeMirror.fromTextArea(this.ui.codeBlock.get(0), {
          mode: "coffeescript",
          tabSize: 2,
          indentUnit: 2,
          indentWithTabs: false,
          lineNumbers: true,
          gutter: true,
          matchBrackets: true,
          firstLineNumber: this.settings.get("startLine"),
          onChange: function(arg, arg2) {
            _this.updateHints();
            _this.model.set("content", _this.editor.getValue());
            _this.updateUndoRedo();
          },
          onGutterClick: foldFunc,
          onCursorActivity: function() {
            _this.editor.matchHighlight("CodeMirror-matchhighlight");
            _this.editor.setLineClass(_this.hlLine, null, null);
            return _this.hlLine = _this.editor.setLineClass(_this.editor.getCursor().line, null, "activeline");
          },
          extraKeys: {
            "Ctrl-Q": function(cm) {
              return foldFunc(cm, cm.getCursor().line);
            },
            Tab: function(cm) {
              return cm.replaceSelection("  ", "end");
            }
          }
        });
        this.hlLine = this.editor.setLineClass(0, "activeline");
        setTimeout(this.editor.refresh, 0);
        this.app.vent.bind("undoRequest", this.undo);
        return this.app.vent.bind("redoRequest", this.redo);
      };

      return CodeEditorView;

    })(marionette.ItemView);
    return CodeEditorView;
  });

}).call(this);
