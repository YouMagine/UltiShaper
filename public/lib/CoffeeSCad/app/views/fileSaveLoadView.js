// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var $, LoadView, SaveView, SingleFileView, boostrap, lF_template, marionette, sF2_template, sF_template, _;
    $ = require('jquery');
    _ = require('underscore');
    boostrap = require('bootstrap');
    marionette = require('marionette');
    sF_template = require("text!templates/saveFile.tmpl");
    lF_template = require("text!templates/loadFile.tmpl");
    sF2_template = require("text!templates/singleFile.tmpl");
    SaveView = (function(_super) {

      __extends(SaveView, _super);

      SaveView.prototype.template = sF_template;

      SaveView.prototype.ui = {
        fileNameInput: "#projectFileName"
      };

      SaveView.prototype.triggers = {
        "mouseup .saveFile": "file:save:mouseup"
      };

      function SaveView(options) {
        var _this = this;
        SaveView.__super__.constructor.call(this, options);
        this.app = require('app');
        this.on("file:save:mouseup", function() {
          var fileName;
          fileName = $(_this.ui.fileNameInput).val();
          _this.app.vent.trigger("fileSaveRequest", fileName);
          return _this.close();
        });
      }

      return SaveView;

    })(Backbone.Marionette.ItemView);
    SingleFileView = (function(_super) {

      __extends(SingleFileView, _super);

      function SingleFileView() {
        this.onRender = __bind(this.onRender, this);
        return SingleFileView.__super__.constructor.apply(this, arguments);
      }

      SingleFileView.prototype.template = sF2_template;

      SingleFileView.prototype.tagName = "tr";

      SingleFileView.prototype.onRender = function() {
        return this.$el.attr("id", this.model.get("name"));
      };

      return SingleFileView;

    })(Backbone.Marionette.ItemView);
    LoadView = (function(_super) {

      __extends(LoadView, _super);

      LoadView.prototype.template = lF_template;

      LoadView.prototype.itemView = SingleFileView;

      LoadView.prototype.itemViewContainer = "tbody";

      LoadView.prototype.events = {
        "mouseup .loadFile": "requestFileLoad",
        "mouseup .deleteFile": "requestFileDelete"
      };

      LoadView.prototype.requestFileLoad = function(ev) {
        var fileName;
        fileName = $(ev.currentTarget).html();
        this.app.vent.trigger("fileLoadRequest", fileName);
        return this.close();
      };

      LoadView.prototype.requestFileDelete = function(ev) {
        var fileName, id;
        id = $(ev.currentTarget);
        fileName = id.closest('tr').attr('id');
        this.app.vent.trigger("fileDeleteRequest", fileName);
        return this.close();
      };

      function LoadView(options) {
        this.requestFileDelete = __bind(this.requestFileDelete, this);

        this.requestFileLoad = __bind(this.requestFileLoad, this);
        LoadView.__super__.constructor.call(this, options);
        this.app = require('app');
        /*
              @on "file:load:mouseup" ,=>
                console.log "blah blah load"
                fileName = $(@ui.fileNameInput).val()
                @app.vent.trigger("fileLoadRequest", fileName)
                @.close()
        */

      }

      return LoadView;

    })(Backbone.Marionette.CompositeView);
    return {
      SaveView: SaveView,
      LoadView: LoadView
    };
  });

}).call(this);
