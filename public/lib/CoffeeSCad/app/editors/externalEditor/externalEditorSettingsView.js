// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(function(require) {
  var $, ExternalEditorSettingsView, MySettingsForm, boostrap, forms, marionette, _;
  $ = require('jquery');
  _ = require('underscore');
  boostrap = require('bootstrap');
  marionette = require('marionette');
  forms = require('backbone-forms');
  MySettingsForm = (function(_super) {
    __extends(MySettingsForm, _super);

    function MySettingsForm(options) {
      if (!options.schema) {
        options.schema = {
          showTrashcan: {
            type: 'Checkbox'
          }
        };
        options.fieldsets = [
          {
            "legend": "General settings",
            "fields": ["renderer"]
          }
        ];
      }
      MySettingsForm.__super__.constructor.call(this, options);
    }

    return MySettingsForm;

  })(Backbone.Form);
  ExternalEditorSettingsView = (function(_super) {
    __extends(ExternalEditorSettingsView, _super);

    function ExternalEditorSettingsView(options) {
      this.render = __bind(this.render, this);
      ExternalEditorSettingsView.__super__.constructor.call(this, options);
      this.wrappedForm = new MySettingsForm({
        model: this.model
      });
    }

    ExternalEditorSettingsView.prototype.render = function() {
      var tmp;
      if (this.beforeRender) {
        this.beforeRender();
      }
      this.trigger("before:render", this);
      this.trigger("item:before:render", this);
      tmp = this.wrappedForm.render();
      this.$el.append(tmp.el);
      this.$el.addClass("tab-pane");
      this.$el.addClass("fade");
      this.$el.attr('id', this.model.get("name"));
      this.bindUIElements();
      if (this.onRender) {
        this.onRender();
      }
      this.trigger("render", this);
      this.trigger("item:rendered", this);
      return this;
    };

    return ExternalEditorSettingsView;

  })(Backbone.Marionette.ItemView);
  return ExternalEditorSettingsView;
});
