// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var $, CodeMirror, CoffeeScript, FileCodeView, codeEditor_template, marionette, vent, _;

  $ = require('jquery');
  _ = require('underscore');
  require('bootstrap');
  marionette = require('marionette');
  CodeMirror = require('CodeMirror');
  require('foldcode');
  require('coffee_synhigh');
  require('match_high');
  require('search');
  require('dialog');
  require('hint');
  require('jsHint');
  require('indent_fold');
  require('closeBrackets');
  require('matchBrackets');
  CoffeeScript = require('CoffeeScript');
  require('coffeelint');
  vent = require('core/messaging/appVent');
  codeEditor_template = require("text!./fileCode.tmpl");
  FileCodeView = (function(_super) {
    __extends(FileCodeView, _super);

    FileCodeView.prototype.template = codeEditor_template;

    FileCodeView.prototype.className = "tab-pane";

    FileCodeView.prototype.ui = {
      codeBlock: "#codeArea",
      infoFooter: "#infoFooter"
    };

    function FileCodeView(options) {
      this.onDomRefresh = __bind(this.onDomRefresh, this);
      this.onRender = __bind(this.onRender, this);
      this._setupEditorEventHandlers = __bind(this._setupEditorEventHandlers, this);
      this.setHeight = __bind(this.setHeight, this);
      this.redo = __bind(this.redo, this);
      this.undo = __bind(this.undo, this);
      this.updateUndoRedo = __bind(this.updateUndoRedo, this);
      this._updateHints = __bind(this._updateHints, this);
      this._processError = __bind(this._processError, this);
      this._clearLintMarkers = __bind(this._clearLintMarkers, this);
      this._clearErrorMarkers = __bind(this._clearErrorMarkers, this);
      this._clearAllMarkers = __bind(this._clearAllMarkers, this);
      this._onProjectCompileError = __bind(this._onProjectCompileError, this);
      this._onProjectCompiled = __bind(this._onProjectCompiled, this);
      this.settingsChanged = __bind(this.settingsChanged, this);
      this.applyStyles = __bind(this.applyStyles, this);
      this.modelSaved = __bind(this.modelSaved, this);
      this.modelChanged = __bind(this.modelChanged, this);
      this.onClose = __bind(this.onClose, this);
      this.onShow = __bind(this.onShow, this);
      this.onFileClosed = __bind(this.onFileClosed, this);
      this.onFileSelected = __bind(this.onFileSelected, this);
      this.onRefreshRequested = __bind(this.onRefreshRequested, this);
      this._tearDownEventHandlers = __bind(this._tearDownEventHandlers, this);
      this._setupEventHandlers = __bind(this._setupEventHandlers, this);      FileCodeView.__super__.constructor.call(this, options);
      this.vent = vent;
      this.settings = options.settings;
      this.editor = null;
      this._compileErrorsMarkers = [];
      this._lintErrorsMarkers = [];
      this._setupEventHandlers();
    }

    FileCodeView.prototype._setupEventHandlers = function() {
      this.model.on("change", this.modelChanged);
      this.model.on("saved", this.modelSaved);
      this.settings.on("change", this.settingsChanged);
      this.vent.on("file:closed", this.onFileClosed);
      this.vent.on("file:selected", this.onFileSelected);
      this.vent.on("file:undoRequest", this.undo);
      this.vent.on("file:redoRequest", this.redo);
      this.vent.on("project:compiled", this._onProjectCompiled);
      this.vent.on("project:compile:error", this._onProjectCompileError);
      return this.vent.on("codeMirror:refresh", this.onRefreshRequested);
    };

    FileCodeView.prototype._tearDownEventHandlers = function() {
      this.model.off("change", this.modelChanged);
      this.model.off("saved", this.modelSaved);
      this.settings.off("change", this.settingsChanged);
      this.vent.off("file:closed", this.onFileClosed);
      this.vent.off("file:selected", this.onFileSelected);
      this.vent.off("file:undoRequest", this.undo);
      this.vent.off("file:redoRequest", this.redo);
      this.vent.off("project:compiled", this._onProjectCompiled);
      this.vent.off("project:compile:error", this._onProjectCompileError);
      return this.vent.off("codeMirror:refresh", this.onRefreshRequested);
    };

    FileCodeView.prototype.onRefreshRequested = function(newHeight) {
      this.editor.refresh();
      this.editor.setSize("100%", newHeight);
      return this.editor.refresh();
    };

    FileCodeView.prototype.onFileSelected = function(model) {
      var history;

      this.vent.off("project:compiled", this._onProjectCompiled);
      this.vent.off("project:compile:error", this._onProjectCompileError);
      this.vent.off("codeMirror:refresh", this.onRefreshRequested);
      if (model === this.model) {
        this.$el.addClass('active');
        this.$el.removeClass('fade');
        history = this.editor.getHistory();
        this.render();
        this.editor.setHistory(history);
        this.updateUndoRedo();
        this.editor.focus();
        return this.editor.refresh();
      } else {
        this.$el.removeClass('active');
        return this.$el.addClass('fade');
      }
    };

    FileCodeView.prototype.onFileClosed = function(fileName) {
      if (fileName === this.model.get("name")) {
        return this.close();
      }
    };

    FileCodeView.prototype.onShow = function() {
      this.$el.addClass('active');
      return this.$el.removeClass('fade');
    };

    FileCodeView.prototype.onClose = function() {
      console.log("closing code view");
      return this._tearDownEventHandlers();
    };

    FileCodeView.prototype.switchModel = function(newModel) {
      this.model = newModel;
      this.editor.setValue(this.model.get("content"));
      this.vent.trigger("clearUndoRedo", this);
      this.editor.clearHistory();
      this.bindTo(this.model, "change", this.modelChanged);
      return this.bindTo(this.model, "saved", this.modelSaved);
    };

    FileCodeView.prototype.modelChanged = function(model, value) {
      return this.applyStyles();
    };

    FileCodeView.prototype.modelSaved = function(model) {};

    FileCodeView.prototype.applyStyles = function() {
      return this.$el.find('[rel=tooltip]').tooltip({
        'placement': 'right'
      });
    };

    FileCodeView.prototype.settingsChanged = function(settings, value) {
      var key, val, _ref, _results;

      _ref = this.settings.changedAttributes();
      _results = [];
      for (key in _ref) {
        val = _ref[key];
        switch (key) {
          case "fontSize":
            _results.push($(".CodeMirror").css("font-size", "" + val + "em"));
            break;
          case "startLine":
            this.editor.setOption("firstLineNumber", val);
            _results.push(this.render());
            break;
          case "smartIndent":
            _results.push(this.editor.setOption("smartIndent", val));
            break;
          case "linting":
            _results.push(this._updateHints());
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    FileCodeView.prototype._onProjectCompiled = function() {
      console.log("pouic");
      return this._clearErrorMarkers();
    };

    FileCodeView.prototype._onProjectCompileError = function(compileResult) {
      var error, errorLevel, errorLine, errorMsg, i, marker, _ref;

      this._clearErrorMarkers();
      _ref = compileResult.errors;
      for (i in _ref) {
        error = _ref[i];
        errorMsg = error.message;
        errorLine = error.location != null ? error.location.first_line - 1 : 0;
        errorLevel = "error";
        if (!isNaN(errorLine)) {
          marker = this._processError(errorMsg, errorLevel, errorLine);
          this._compileErrorsMarkers.push(marker);
        }
      }
      return this.applyStyles();
    };

    FileCodeView.prototype._clearAllMarkers = function() {
      this._compileErrorsMarkers = [];
      this._lintErrorsMarkers = [];
      return this.editor.clearGutter("lintAndErrorsGutter");
    };

    FileCodeView.prototype._clearErrorMarkers = function() {
      var marker, _i, _len, _ref;

      _ref = this._compileErrorsMarkers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        marker = _ref[_i];
        this.editor.setGutterMarker(marker.line, "lintAndErrorsGutter", null);
      }
      return this._compileErrorsMarkers = [];
    };

    FileCodeView.prototype._clearLintMarkers = function() {
      var marker, _i, _len, _ref;

      _ref = this._lintErrorsMarkers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        marker = _ref[_i];
        this.editor.setGutterMarker(marker.line, "lintAndErrorsGutter", null);
      }
      return this._lintErrorsMarkers = [];
    };

    FileCodeView.prototype._processError = function(errorMsg, errorLevel, errorLine) {
      var escape, marker, markerDiv, markerDiv$, markerMarkup;

      markerDiv = document.createElement("span");
      markerDiv$ = $(markerDiv);
      escape = function(s) {
        return ('' + s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
      };
      if (errorLevel === "warn") {
        markerDiv$.addClass("CodeWarningMarker");
        markerMarkup = "<a href='#' rel='tooltip' title=\"" + (escape(errorMsg)) + "\"> <i class='icon-remove-sign'></i></a>";
      } else if (errorLevel === "error") {
        markerDiv$.addClass("CodeErrorMarker");
        markerMarkup = "<a href='#' rel='tooltip' title=\"" + (escape(errorMsg)) + "\"> <i class='icon-remove-sign'></i></a>";
      }
      markerDiv$.html(markerMarkup);
      marker = this.editor.setGutterMarker(errorLine, "lintAndErrorsGutter", markerDiv);
      marker.line = errorLine;
      return marker;
    };

    FileCodeView.prototype._updateHints = function() {
      var error, errorLevel, errorLine, errorMsg, errors, i, marker;

      this._clearLintMarkers();
      try {
        errors = coffeelint.lint(this.editor.getValue(), this.settings.get("linting"));
        if (errors.length === 0) {
          this.vent.trigger("file:noError");
        } else {
          this.vent.trigger("file:errors", errors);
        }
        for (i in errors) {
          error = errors[i];
          errorMsg = error.message;
          errorLine = error.lineNumber - 1;
          errorLevel = error.level;
          if (!isNaN(errorLine)) {
            marker = this._processError(errorMsg, errorLevel, errorLine);
            this._lintErrorsMarkers.push(marker);
          }
        }
      } catch (_error) {
        error = _error;
        errorLine = error.message.split("line ");
        errorLine = parseInt(errorLine[errorLine.length - 1], 10) - 1;
        errorMsg = error.message;
        if (!isNaN(errorLine)) {
          marker = this._processError(errorMsg, "error", errorLine);
          this._lintErrorsMarkers.push(marker);
        }
        /*
        try
        catch error
          console.log "ERROR #{error} in adding error marker"
        */

      }
      return this.applyStyles();
    };

    FileCodeView.prototype.updateUndoRedo = function() {
      var redos, undos;

      redos = this.editor.historySize().redo;
      undos = this.editor.historySize().undo;
      if (redos > 0) {
        this.vent.trigger("file:redoAvailable", this);
      } else {
        this.vent.trigger("file:redoUnAvailable", this);
      }
      if (undos > 0) {
        return this.vent.trigger("file:undoAvailable", this);
      } else {
        return this.vent.trigger("file:undoUnAvailable", this);
      }
    };

    FileCodeView.prototype.undo = function() {
      var undoes;

      undoes = this.editor.historySize().undo;
      if (undoes > 0) {
        return this.editor.undo();
      }
    };

    FileCodeView.prototype.redo = function() {
      var redoes;

      redoes = this.editor.historySize().redo;
      if (redoes > 0) {
        return this.editor.redo();
      }
    };

    FileCodeView.prototype.setHeight = function(height) {
      this.editor.getWrapperElement().style.height = height + 'px';
      return this.editor.refresh();
    };

    FileCodeView.prototype._setupEditorEventHandlers = function() {
      var foldFunction,
        _this = this;

      foldFunction = CodeMirror.newFoldFunction(CodeMirror.indentRangeFinder);
      this.editor.on("change", function(cm, change) {
        _this._updateHints();
        _this.model.content = _this.editor.getValue();
        return _this.updateUndoRedo();
      });
      this.editor.on("gutterClick", function(cm, line, gutter, clickEvent) {
        foldFunction(cm, cm.getCursor().line);
        return console.log("attempting to fold", cm.getCursor().line);
      });
      return this.editor.on("cursorActivity", function(cm) {
        var cursor, infoText;

        cursor = _this.editor.getCursor();
        _this.editor.removeLineClass(_this.hlLine, "activeline");
        _this.hlLine = _this.editor.addLineClass(cursor.line, null, "activeline");
        infoText = "Line: " + cursor.line + " Column: " + cursor.ch;
        return _this.ui.infoFooter.text(infoText);
      });
    };

    FileCodeView.prototype.onRender = function() {
      return $(".CodeMirror").css("font-size", "" + (this.settings.get('fontSize')) + "em");
    };

    FileCodeView.prototype.onDomRefresh = function() {
      var _this = this;

      CodeMirror.commands.autocomplete = function(cm) {
        return CodeMirror.showHint(cm, CodeMirror.coffeeSCadHint);
      };
      this.editor = CodeMirror.fromTextArea(this.ui.codeBlock.get(0), {
        theme: "lesser-dark",
        mode: "coffeescript",
        tabSize: 2,
        indentUnit: 2,
        indentWithTabs: false,
        lineNumbers: true,
        gutter: true,
        matchBrackets: true,
        autoCloseBrackets: true,
        undoDepth: this.settings.get("undoDepth"),
        firstLineNumber: this.settings.get("startLine"),
        highlightSelectionMatches: true,
        smartIndent: this.settings.get("smartIndent"),
        gutters: ["lintAndErrorsGutter", "CodeMirror-linenumbers"],
        extraKeys: {
          Tab: function(cm) {
            if (cm.somethingSelected()) {
              return cm.indentSelection("add");
            } else {
              return cm.replaceSelection("  ", "end");
            }
          },
          "Ctrl-Space": "autocomplete",
          "Ctrl-D": function(cm) {
            var doc, line;

            doc = cm.getDoc();
            line = doc.sel.anchor.line;
            cm.getDoc().removeLine(line);
            return false;
          }
        }
      });
      this.$el.attr('id', this.model.name);
      this.hlLine = this.editor.addLineClass(0, "activeline");
      this._setupEditorEventHandlers();
      return setTimeout((function() {
        _this.editor.refresh();
        return $(".CodeMirror").css("font-size", "" + (_this.settings.get('fontSize')) + "em");
      }), 2);
    };

    return FileCodeView;

  })(Backbone.Marionette.ItemView);
  return FileCodeView;
});
