// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var $, ProjectBrowserView, ProjectsStoreView, StoreView, boostrap, contextMenu, jstree, marionette, projectBrowserTemplate, projectStoreListTemplate, projectStoreTemplate, reqRes, rootTemplate, vent, _;

  $ = require('jquery');
  _ = require('underscore');
  boostrap = require('bootstrap');
  contextMenu = require('contextMenu');
  marionette = require('marionette');
  jstree = require('jquery_jstree');
  require('jquery_sscroll');
  vent = require('core/messaging/appVent');
  reqRes = require('core/messaging/appReqRes');
  projectBrowserTemplate = require("text!./projectBrowser.tmpl");
  rootTemplate = $(projectBrowserTemplate).filter('#projectBrowserTmpl');
  projectStoreListTemplate = _.template($(projectBrowserTemplate).filter('#projectStoreListTmpl').html());
  projectStoreTemplate = _.template($(projectBrowserTemplate).filter('#projectStoreTmpl').html());
  ProjectBrowserView = (function(_super) {
    __extends(ProjectBrowserView, _super);

    ProjectBrowserView.prototype.template = rootTemplate;

    ProjectBrowserView.prototype.regions = {
      projectStores: "#projectStores",
      projectFiles: "#projectFiles"
    };

    ProjectBrowserView.prototype.ui = {
      fileNameInput: "#fileName",
      thumbNail: "#thumbNail",
      projectThumbNail: "#projectThumbNail",
      validationButton: "#validateOperationBtn",
      errorConsole: "#errorConsole",
      storesContainer: "#storesContainer",
      projectFiles: "#projectFiles"
    };

    ProjectBrowserView.prototype.events = {
      "click .newProject": "onProjectNewRequested",
      "click .saveProject": "onProjectSaveRequested",
      "click .loadProject": "onProjectLoadRequested"
    };

    function ProjectBrowserView(options) {
      this.onOperationSucceeded = __bind(this.onOperationSucceeded, this);
      this.onProjectLoadRequested = __bind(this.onProjectLoadRequested, this);
      this.onProjectSaveRequested = __bind(this.onProjectSaveRequested, this);
      this.onProjectNewRequested = __bind(this.onProjectNewRequested, this);
      this.onProjectSelected = __bind(this.onProjectSelected, this);
      this.onRender = __bind(this.onRender, this);
      var _ref, _ref1;

      ProjectBrowserView.__super__.constructor.call(this, options);
      this.operation = (_ref = options.operation) != null ? _ref : "save";
      this.stores = (_ref1 = options.stores) != null ? _ref1 : {};
      this.vent = vent;
      this.vent.on("project:created", this.onOperationSucceeded);
      this.vent.on("project:saved", this.onOperationSucceeded);
      this.vent.on("project:loaded", this.onOperationSucceeded);
      this.vent.on("project:selected", this.onProjectSelected);
    }

    ProjectBrowserView.prototype.serializeData = function() {
      return {
        operation: this.operation,
        name: this.model.get("name")
      };
    };

    ProjectBrowserView.prototype.onRender = function() {
      var doScreenShotRes, name, projectsStoreView, screenshotPromise, store, tmpCollection, _ref,
        _this = this;

      tmpCollection = new Backbone.Collection();
      _ref = this.stores;
      for (name in _ref) {
        store = _ref[name];
        store.targetProject = this.model;
        tmpCollection.add(store);
      }
      this.stores = tmpCollection;
      projectsStoreView = new ProjectsStoreView({
        collection: tmpCollection,
        model: this.model
      });
      this.projectStores.show(projectsStoreView);
      if (this.operation === "save") {
        screenshotPromise = reqRes.request("project:getScreenshot");
        doScreenShotRes = function(screenshotUrl) {
          _this.ui.projectThumbNail.attr("src", screenshotUrl);
          _this.ui.thumbNail.removeClass("hide");
          return _this.model.createFile({
            name: ".thumbnail",
            content: screenshotUrl,
            ext: "png"
          });
        };
        return $.when(screenshotPromise).done(doScreenShotRes);
      } else if (this.operation === "load") {
        return $(this.ui.fileNameInput).attr("readonly", "readonly");
      }
    };

    ProjectBrowserView.prototype.onProjectSelected = function(projectName) {
      var onProjectFilesResponse,
        _this = this;

      onProjectFilesResponse = function(entries) {
        var name, _i, _len;

        _this.ui.projectFiles.html("<ul></ul>");
        for (_i = 0, _len = projectNames.length; _i < _len; _i++) {
          name = projectNames[_i];
          _this.ui.projectFiles.append("<li><a href='#' >" + name + "  </a></li>");
        }
        _this.delegateEvents();
        return _this.ui.projectFiles.slimScroll({
          size: "10px",
          height: "300px",
          alwaysVisible: true
        });
      };
      return $(this.ui.fileNameInput).val(projectName);
      /* 
      console.log "store collection"
      console.log @stores
      console.log "current project: #{projectName}"
      currentStore = @stores.get("projectName")
      currentStore.getProjectFiles(fileNameInput,onProjectFilesResponse)
      */

    };

    ProjectBrowserView.prototype.onProjectNewRequested = function() {
      var fileName,
        _this = this;

      fileName = this.ui.fileNameInput.val();
      if (this.model.dirty) {
        return bootbox.dialog("Project is unsaved, you will loose your changes, proceed anyway?", [
          {
            label: "Ok",
            "class": "btn-inverse",
            callback: function() {
              return vent.trigger("project:newRequest", fileName);
            }
          }, {
            label: "Cancel",
            "class": "btn-inverse",
            callback: function() {}
          }
        ]);
      }
    };

    ProjectBrowserView.prototype.onProjectSaveRequested = function() {
      var fileName;

      fileName = this.ui.fileNameInput.val();
      vent.trigger("project:saveRequest", fileName);
      this.ui.validationButton.attr("disabled", true);
      this.projectStores.close();
      return this.ui.storesContainer.hide();
    };

    ProjectBrowserView.prototype.onProjectLoadRequested = function() {
      var fileName,
        _this = this;

      fileName = $(this.ui.fileNameInput).val();
      if (this.model.dirty) {
        return bootbox.dialog("Project is unsaved, you will loose your changes, proceed anyway?", [
          {
            label: "Ok",
            "class": "btn-inverse",
            callback: function() {
              vent.trigger("project:loadRequest", fileName);
              _this.ui.validationButton.attr("disabled", true);
              _this.projectStores.close();
              return _this.ui.storesContainer.hide();
            }
          }, {
            label: "Cancel",
            "class": "btn-inverse",
            callback: function() {}
          }
        ]);
      } else {
        vent.trigger("project:loadRequest", fileName);
        this.ui.validationButton.attr("disabled", true);
        this.projectStores.close();
        return this.ui.storesContainer.hide();
      }
    };

    ProjectBrowserView.prototype.onOperationSucceeded = function() {
      return this.close();
    };

    ProjectBrowserView.prototype.onClose = function() {
      var _this = this;

      this.vent.off("project:saved", this.onOperationSucceeded);
      this.vent.off("project:loaded", this.onOperationSucceeded);
      return this.vent.off("project:selected", function(id) {
        return $(_this.ui.fileNameInput).val(id);
      });
    };

    return ProjectBrowserView;

  })(Backbone.Marionette.Layout);
  StoreView = (function(_super) {
    __extends(StoreView, _super);

    StoreView.prototype.template = projectStoreTemplate;

    StoreView.prototype.ui = {
      projects: "#projects"
    };

    StoreView.prototype.events = {
      "click .accordion-heading": "onStoreSelected",
      "click .projectSelector": "onProjectSelected"
    };

    function StoreView(options) {
      this.onProjectsFetched = __bind(this.onProjectsFetched, this);
      this.onLoadRequested = __bind(this.onLoadRequested, this);
      this.onSaveRequested = __bind(this.onSaveRequested, this);
      this.onCreateRequested = __bind(this.onCreateRequested, this);
      this.onProjectSelected = __bind(this.onProjectSelected, this);
      this.onStoreSelected = __bind(this.onStoreSelected, this);      StoreView.__super__.constructor.call(this, options);
      this.selected = false;
      vent.on("project:newRequest", this.onCreateRequested);
      vent.on("project:saveRequest", this.onSaveRequested);
      vent.on("project:loadRequest", this.onLoadRequested);
      vent.on("store:selected", this.onStoreSelected);
    }

    StoreView.prototype.onStoreSelected = function(name) {
      var header;

      if (name.currentTarget != null) {
        if (this.selected) {
          this.selected = false;
          header = this.$el.find(".store-header");
          return header.removeClass('alert-info');
        } else {
          this.selected = true;
          header = this.$el.find(".store-header");
          header.addClass('alert-info');
          return vent.trigger("store:selected", this.model.get("name"));
        }
      } else {
        if (name !== this.model.get("name")) {
          this.selected = false;
          header = this.$el.find(".store-header");
          return header.removeClass('alert-info');
        } else {
          this.selected = true;
          header = this.$el.find(".store-header");
          return header.addClass('alert-info');
        }
      }
    };

    StoreView.prototype.onProjectSelected = function(e) {
      var id;

      e.preventDefault();
      id = $(e.currentTarget).attr("id");
      vent.trigger("project:selected", id);
      vent.trigger("store:selected", this.model.get("name"));
      return this.trigger("project:selected", this.model);
    };

    StoreView.prototype.onCreateRequested = function(fileName) {
      if (this.selected) {
        return this.model.createProject(fileName);
      }
    };

    StoreView.prototype.onSaveRequested = function(fileName) {
      var projectToSave;

      if (this.selected) {
        projectToSave = this.model.targetProject;
        if (projectToSave != null) {
          projectToSave.rename(fileName);
          return this.model.saveProject(projectToSave);
        }
      }
    };

    StoreView.prototype.onLoadRequested = function(fileName) {
      console.log("load requested");
      if (this.selected) {
        return this.model.loadProject(fileName);
      }
    };

    StoreView.prototype.onRender = function() {
      return this.model.getProjectsName(this.onProjectsFetched);
    };

    StoreView.prototype.onProjectsFetched = function(projectNames) {
      var name, _i, _len;

      for (_i = 0, _len = projectNames.length; _i < _len; _i++) {
        name = projectNames[_i];
        this.ui.projects.append("<li><a id=" + name + " class='projectSelector' href='#' data-toggle='context' data-target='#context-menu'>" + name + "  </a></li>");
      }
      this.delegateEvents();
      this.ui.projects.slimScroll({
        size: "10px",
        height: "100px",
        alwaysVisible: true
      });
      return this.$el.find('[rel=tooltip]').tooltip({
        'placement': 'right'
      });
    };

    StoreView.prototype.onClose = function() {
      vent.off("project:saveRequest", this.onSaveRequested);
      vent.off("project:loadRequest", this.onLoadRequested);
      return vent.off("store:selected", this.onStoreSelected);
    };

    return StoreView;

  })(Backbone.Marionette.ItemView);
  ProjectsStoreView = (function(_super) {
    __extends(ProjectsStoreView, _super);

    ProjectsStoreView.prototype.template = projectStoreListTemplate;

    ProjectsStoreView.prototype.itemView = StoreView;

    function ProjectsStoreView(options) {
      this.toto = __bind(this.toto, this);      ProjectsStoreView.__super__.constructor.call(this, options);
      this.currentStore = null;
      this.on("itemview:project:selected", this.toto);
    }

    ProjectsStoreView.prototype.toto = function(childView, store) {
      return console.log(store);
    };

    ProjectsStoreView.prototype.onRenderOLD = function() {
      return this.ui.treeTest.jstree({
        "core": {
          "animation": 0
        },
        "plugins": ["html_data", "ui", "contextmenu", "themeroller"],
        "html_data": {
          "data": "<li id='root'>\n  <a href='#'>Root node</a>\n  <ul><li><a href='#'>Child node</a></li></ul>\n  <ul><li><a href='#'>Child node2</a></li></ul>\n  <ul>\n    <li>\n      <a href='#'>Child node2</a>\n      <ul>\n        <li><a href='#'>Child node2 sub 1</a></li>\n      </ul>\n    </li>\n  </ul>\n</li>"
        }
      });
    };

    return ProjectsStoreView;

  })(Backbone.Marionette.CompositeView);
  return ProjectBrowserView;
});
