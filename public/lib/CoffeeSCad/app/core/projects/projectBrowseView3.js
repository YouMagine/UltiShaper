// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(function(require) {
  var $, ProjectBrowserView, ProjectBrowserViewModel, StoreView, boostrap, buildProperties, contextMenu, dataBoundViews, marionette, modelBinder, projectBrowserTemplate, projectStoreListTemplate, projectStoreTemplate, reqRes, rootTemplate, vent, _, _ref;

  $ = require('jquery');
  _ = require('underscore');
  boostrap = require('bootstrap');
  contextMenu = require('contextMenu');
  marionette = require('marionette');
  modelBinder = require('modelbinder');
  vent = require('core/messaging/appVent');
  reqRes = require('core/messaging/appReqRes');
  dataBoundViews = require('core/utils/DataBoundViews');
  buildProperties = require('core/utils/buildProperties');
  projectBrowserTemplate = require("text!./projectBrowser3.tmpl");
  rootTemplate = $(projectBrowserTemplate).filter('#projectBrowserTmpl');
  projectStoreListTemplate = _.template($(projectBrowserTemplate).filter('#projectStoreListTmpl').html());
  projectStoreTemplate = _.template($(projectBrowserTemplate).filter('#projectStoreTmpl').html());
  ProjectBrowserViewModel = (function(_super) {
    __extends(ProjectBrowserViewModel, _super);

    ProjectBrowserViewModel.prototype.defaults = {
      operation: "save",
      currentStore: null,
      project: null
    };

    ProjectBrowserViewModel.prototype.attributeNames = ['operation', 'currentStore', 'project'];

    function ProjectBrowserViewModel(options) {
      var name, store, tmpCollection, _ref, _ref1;

      ProjectBrowserViewModel.__super__.constructor.call(this, options);
      this.stores = (_ref = options.stores) != null ? _ref : {};
      tmpCollection = new Backbone.Collection();
      _ref1 = this.stores;
      for (name in _ref1) {
        store = _ref1[name];
        tmpCollection.add(store);
      }
      this.stores = tmpCollection;
    }

    return ProjectBrowserViewModel;

  })(Backbone.Model);
  StoreView = (function(_super) {
    __extends(StoreView, _super);

    function StoreView() {
      _ref = StoreView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StoreView.prototype.template = projectStoreTemplate;

    return StoreView;

  })(Backbone.Marionette.ItemView);
  ProjectBrowserView = (function(_super) {
    __extends(ProjectBrowserView, _super);

    ProjectBrowserView.prototype.template = projectBrowserTemplate;

    function ProjectBrowserView(options) {
      this.onClose = __bind(this.onClose, this);
      var _this = this;

      options.project = options.model;
      delete options.model;
      options.model = new ProjectBrowserViewModel(options);
      ProjectBrowserView.__super__.constructor.call(this, options);
      this.modelBinder = new Backbone.ModelBinder();
      this.bindings = {
        compiled: [
          {
            selector: '#validateOperationBtn',
            elAttribute: 'disabled',
            converter: function() {
              return !(_this.model.currentStore === null);
            }
          }
        ]
      };
    }

    ProjectBrowserView.prototype.onRender = function() {
      return this.modelBinder.bind(this.model, this.el, this.bindings);
    };

    ProjectBrowserView.prototype.onClose = function() {
      return this.modelBinder.unbind();
    };

    return ProjectBrowserView;

  })(Backbone.Marionette.Layout);
  return ProjectBrowserView;
});
