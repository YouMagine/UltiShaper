// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(function(require) {
  var Backbone, BrowserLibrary, LocalStorage, Project, YouMagineStore, buildProperties, merge, reqRes, utils, vent;
  Backbone = require('backbone');
  LocalStorage = require('localstorage');
  vent = require('core/messaging/appVent');
  reqRes = require('core/messaging/appReqRes');
  buildProperties = require('core/utils/buildProperties');
  utils = require('core/utils/utils');
  merge = utils.merge;
  Project = require('core/projects/project');
  BrowserLibrary = (function(_super) {
    __extends(BrowserLibrary, _super);

    "a library contains multiple projects, stored in localstorage (browser)";

    BrowserLibrary.prototype.model = Project;

    BrowserLibrary.prototype.defaults = {
      recentProjects: []
    };

    function BrowserLibrary(options) {
      BrowserLibrary.__super__.constructor.call(this, options);
    }

    BrowserLibrary.prototype.comparator = function(project) {
      var date;
      date = new Date(project.lastModificationDate);
      return date.getTime();
    };

    return BrowserLibrary;

  })(Backbone.Collection);
  YouMagineStore = (function(_super) {
    __extends(YouMagineStore, _super);

    YouMagineStore.prototype.attributeNames = ['name', 'loggedIn'];

    buildProperties(YouMagineStore);

    YouMagineStore.prototype.idAttribute = 'name';

    YouMagineStore.prototype.defaults = {
      name: "YouMagineStore",
      storeType: "YouMagine",
      tooltip: "Youmagine: Share your imagination",
      loggedIn: false
    };

    YouMagineStore.prototype.token = null;

    YouMagineStore.prototype.apiURL = "http://api.youmagine.com";

    YouMagineStore.prototype.checkForTokenPID = null;

    YouMagineStore.prototype.checkForTokenTimes = 30;

    YouMagineStore.prototype.checkForTokenTimesLeft = 30;

    YouMagineStore.prototype.checkForTokenInterval = 1000;

    YouMagineStore.prototype.designOnline = [];

    function YouMagineStore(options) {
      this._sourceFetchHandler = __bind(this._sourceFetchHandler, this);
      this._readFile = __bind(this._readFile, this);
      this._fetchFileListForDesign = __bind(this._fetchFileListForDesign, this);
      this._getProjectFiles = __bind(this._getProjectFiles, this);
      this._removeFile = __bind(this._removeFile, this);
      this._addToProjectsList = __bind(this._addToProjectsList, this);
      this._removeFromProjectsList = __bind(this._removeFromProjectsList, this);
      this.destroyFile = __bind(this.destroyFile, this);
      this.renameProject = __bind(this.renameProject, this);
      this.deleteProject = __bind(this.deleteProject, this);
      this.loadProject = __bind(this.loadProject, this);
      this.autoSaveProject = __bind(this.autoSaveProject, this);
      this.pushSavedProject = __bind(this.pushSavedProject, this);
      this.saveProject = __bind(this.saveProject, this);
      this.saveProject_ = __bind(this.saveProject_, this);
      this.getProjectFiles = __bind(this.getProjectFiles, this);
      this.getProject = __bind(this.getProject, this);
      this.getProjectsName = __bind(this.getProjectsName, this);
      this.listDesignsCallback = __bind(this.listDesignsCallback, this);
      this.listDesigns = __bind(this.listDesigns, this);
      this.receiveTokenMessage = __bind(this.receiveTokenMessage, this);
      this.logout = __bind(this.logout, this);
      this.setLoggedIn = __bind(this.setLoggedIn, this);
      this.authCheck = __bind(this.authCheck, this);
      this.login = __bind(this.login, this);
      var defaults;
      defaults = {
        storeURI: "projects"
      };
      options = merge(defaults, options);
      this.storeURI = options.storeURI;
      YouMagineStore.__super__.constructor.call(this, options);
      this.store = new Backbone.LocalStorage(this.storeURI);
      this.isLogginRequired = true;
      this.vent = vent;
      this.vent.on("YouMagineStore:login", this.login);
      this.vent.on("YouMagineStore:logout", this.logout);
      this.vent.on("project:saved", this.pushSavedProject);
      this.projectsList = [];
      console.log("fetched lib", this.lib);
      reqRes.addHandler("getbrowserFileOrProjectCode", this._sourceFetchHandler);
    }

    YouMagineStore.prototype.login = function() {
      var login_succeeded;
      console.log("youmagine logging in...");
      login_succeeded = false;
      this.authCheck();
      if (this.token !== null) {
        console.log("There's a token cookie (" + this.token + "). Welcome " + this.screen_name + "!");
        console.log("does the token work?");
        return this.listDesigns();
      } else {
        this.authRequestWindow = window.open('http://www.youmagine.com/integrations/ultishaper/authorized_integrations/new?redirect_url=http://localhost:3000/youmagine/get_token&deny_url=http://localhost:3000/youmagine/get_token', '', 'width=450,height=500');
        this.authRequestWindow.focus();
        window.clearInterval(this.checkForTokenPID);
        this.checkForTokenPID = window.setInterval(this.receiveTokenMessage, this.checkForTokenInterval);
        return console.log(this.checkForTokenPID);
      }
    };

    YouMagineStore.prototype.authCheck = function() {
      this.token = $.cookie('youmagine_token');
      this.username = $.cookie('youmagine_user');
      this.user_id = $.cookie('youmagine_user_id');
      this.screen_name = $.cookie('youmagine_screen_name');
      console.log("youmagine authCheck");
      if (this.token !== null) {
        console.log("There's a token cookie (" + this.token + "). Welcome " + this.screen_name + "!");
        console.log("does the token work?");
        this.listDesigns();
      }
      if (this.loggedIn !== true) {
        return console.log("youmagine login failed.");
      }
    };

    YouMagineStore.prototype.setLoggedIn = function() {
      this.loggedIn = true;
      window.clearInterval(this.checkForTokenPID);
      return this.vent.trigger("YouMagineStore:loggedIn");
    };

    YouMagineStore.prototype.logout = function() {
      console.log("youmagine logging out...");
      $.cookie("youmagine_token", null);
      $.cookie("youmagine_user", null);
      $.cookie("youmagine_user_id", null);
      this.loggedIn = false;
      this.vent.trigger("YouMagineStore:loggedOut");
      return console.log("youmagine logged out");
    };

    YouMagineStore.prototype.receiveTokenMessage = function() {
      if (--this.checkForTokenTimesLeft <= 0) {
        console.log("I've been trying to connect to Youmagine for " + this.checkForTokenTimes + " seconds. Giving up.");
        window.clearInterval(this.checkForTokenPID);
        this.checkForTokenTimesLeft = this.checkForTokenTimes;
      }
      console.log("do I have a token???");
      this.token = $.cookie('youmagine_token');
      if (this.token === null) {
        return console.log("token is null");
      } else {
        console.log("token recieved. Done.");
        if (typeof this.authRequestWindow === "object" && this.authRequestWindow.close) {
          this.authRequestWindow.location.href = '/youmagine/connect_success';
        }
        if (this.listDesigns() === false) {
          console.log("receiveTokenMessage(): Couldnt list designs. Cant use Youmagine.");
        } else {
          this.loggedIn = true;
        }
        return window.clearInterval(this.checkForTokenPID);
      }
    };

    YouMagineStore.prototype.listDesigns = function() {
      var req, that,
        _this = this;
      console.log("listing your Designs on YouMagine from API " + this.apiURL);
      that = this;
      return req = $.getJSON("" + this.apiURL + "/designs.json", {
        auth_token: this.token
      }, function(data, resp) {
        return _this.listDesignsCallback(data);
      });
    };

    YouMagineStore.prototype.listDesignsCallback = function(data) {
      console.log("listDesignsCallback()");
      this.designOnline = data;
      console.log(data);
      if (data.length) {
        return this.setLoggedIn();
      } else {
        if (this.loggedIn === false) {
          this.authRequestWindow = window.open('http://www.youmagine.com/integrations/ultishaper/authorized_integrations/new?redirect_url=http://localhost:3000/youmagine/get_token&deny_url=http://localhost:3000/youmagine/get_token', '', 'width=450,height=500');
          this.authRequestWindow.focus();
          window.clearInterval(this.checkForTokenPID);
          this.checkForTokenPID = window.setInterval(this.receiveTokenMessage, this.checkForTokenInterval);
          return console.log(this.checkForTokenPID);
        }
      }
    };

    YouMagineStore.prototype.getProjectsName = function(callback) {
      var design, error, projectsList, _i, _len, _ref;
      try {
        projectsList = localStorage.getItem("" + this.storeURI);
        console.log("browser store projects", projectsList, "storeURI", "" + this.storeURI);
        if (projectsList) {
          projectsList = projectsList.split(',');
        } else {
          projectsList = [];
        }
        this.projectsList = projectsList;
        console.log("projectsList: =========", projectsList);
        _ref = this.designOnline;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          design = _ref[_i];
          projectsList.unshift(design.slug);
        }
        this._getAllProjectsHelper();
        /* 
        projectNames = []
        for model in @lib.models
          projectNames.push(model.id)
          @projectsList.push(model.id)
        */

        return callback(this.projectsList);
      } catch (_error) {
        error = _error;
        return console.log("could not fetch projectsName from " + this.name + " because of error " + error);
      }
    };

    YouMagineStore.prototype.getProject = function(projectName) {};

    YouMagineStore.prototype.getProjectFiles = function(projectName) {
      var d, fileNames;
      d = $.Deferred();
      fileNames = [];
      if (__indexOf.call(this.projectsList, projectName) >= 0) {
        fileNames = this._getProjectFiles(projectName);
      }
      d.resolve(fileNames);
      return d;
    };

    YouMagineStore.prototype.saveProject_ = function(project, newName) {
      var projectURI, rootStoreURI;
      project.collection = null;
      this.lib.add(project);
      if (newName != null) {
        project.name = newName;
      }
      projectURI = "" + this.storeURI + "-" + newName;
      rootStoreURI = "" + projectURI + "-files";
      project.rootFolder.changeStorage("localStorage", new Backbone.LocalStorage(rootStoreURI));
      project.save();
      return this.vent.trigger("project:saved");
    };

    YouMagineStore.prototype.saveProject = function(project, newName) {
      var added, attrName, attrValue, attributes, content, ext, file, fileName, filePath, filesList, firstSave, index, name, nameChange, oldFiles, projectName, projectURI, removed, rootStoreURI, strinfigiedProject, _i, _len, _ref;
      project.collection = null;
      nameChange = false;
      if (project.name !== newName) {
        nameChange = true;
      }
      if (newName != null) {
        project.name = newName;
      }
      firstSave = false;
      if (project.dataStore == null) {
        firstSave = true;
      } else if (project.dataStore !== this || nameChange) {
        firstSave = true;
      }
      project.dataStore = this;
      projectName = project.name;
      this._addToProjectsList(project.name);
      projectURI = "" + this.storeURI + "-" + projectName;
      rootStoreURI = "" + projectURI + "-files";
      filesList = [];
      _ref = project.rootFolder.models;
      for (index in _ref) {
        file = _ref[index];
        name = file.name;
        content = file.content;
        filePath = "" + rootStoreURI + "-" + name;
        ext = name.split('.').pop();
        localStorage.setItem(filePath, JSON.stringify(file.toJSON()));
        filesList.push(file.name);
        file.trigger("save");
      }
      oldFiles = localStorage.getItem(rootStoreURI);
      if (oldFiles != null) {
        oldFiles = oldFiles.split(',');
        added = _.difference(filesList, oldFiles);
        removed = _.difference(oldFiles, filesList);
        for (_i = 0, _len = removed.length; _i < _len; _i++) {
          fileName = removed[_i];
          this._removeFile(projectName, fileName);
        }
      }
      localStorage.setItem(rootStoreURI, filesList.join(","));
      attributes = _.clone(project.attributes);
      for (attrName in attributes) {
        attrValue = attributes[attrName];
        if (__indexOf.call(project.persistedAttributeNames, attrName) < 0) {
          delete attributes[attrName];
        }
      }
      strinfigiedProject = JSON.stringify(attributes);
      localStorage.setItem(projectURI, strinfigiedProject);
      if (firstSave) {
        project._clearFlags();
      }
      project.trigger("save", project);
      return this.vent.trigger("project:saved", project);
    };

    YouMagineStore.prototype.pushSavedProject = function(project) {
      var data, filesList, req, type, url;
      console.log('going to push project to youmagine.', project);
      window.apiURL = this.apiURL;
      url = "" + window.apiURL + "/designs.json?auth_token=" + this.token;
      url = "" + this.apiURL + "/designs/60.json?auth_token=" + this.token;
      window.auth_token = this.token;
      data = {
        'design[name]': project.name,
        'design[description]': 'Made with the <b>Ultishaper</b>!!',
        'design[license]': 'cc'
      };
      filesList = project.rootFolder.models;
      type = 'PUT';
      return req = $.ajax(url, {
        data: data,
        type: type,
        success: function(data, resp, jqXHRObj) {
          var aBlob, dataB64, entityType, ext, fd, file, fileContent, fileName, i, index, _results;
          console.log("#Response: " + resp + " !!!!!!", data, jqXHRObj);
          _results = [];
          for (index in filesList) {
            file = filesList[index];
            fileName = file.id;
            fileContent = file.content;
            ext = fileName.split('.').pop().toLowerCase();
            if (ext !== 'ultishape' && ext !== 'png') {
              _results.push(console.log('Phase 2: NOT UPLOADING:', fileName));
            } else {
              console.log('Phase 2: UPLOADING:', fileName);
              dataB64 = [];
              i = -1;
              console.log('fileContent is a ' + typeof fileContent, 'Content:', fileContent.substring(0, 30));
              if (ext === 'ultishape') {
                while (i++ < fileContent.length) {
                  dataB64.push(fileContent.charAt(i));
                }
                aBlob = new Blob(dataB64, {
                  type: 'application/xml'
                });
                entityType = 'documents';
                fd = new FormData;
                fd.append('document[name]', fileName);
                fd.append('document[description]', 'The main UltiShaper design file.');
                fd.append('document[file]', aBlob, fileName);
              }
              if (ext === 'png') {
                console.log('b64toBlob');
                aBlob = b64toBlob(fileContent.substring(22, fileContent.length), 'image/png');
                console.log({
                  txt: 'b64toBlob result:',
                  result: aBlob
                });
                entityType = 'images';
                fd = new FormData;
                fd.append('image[name]', fileName);
                fd.append('image[description]', 'Design made with the UltiShaper.');
                fd.append('image[file]', aBlob, fileName);
              }
              url = "http://api.youmagine.com/designs/60/" + entityType + (".json?auth_token=" + window.auth_token);
              console.log("Posting to ", url);
              _results.push($.ajax(url, {
                type: 'POST',
                data: fd,
                processData: false,
                contentType: false,
                cache: false,
                done: function() {
                  return console.log('FormData post: ', data);
                },
                error: function(a, b, c) {
                  return console.log('failed: ', a, b, c, a.responseText);
                }
              }));
            }
          }
          return _results;
        }
      });
    };

    YouMagineStore.prototype.autoSaveProject = function(srcProject) {
      var attrName, attrValue, attributes, content, ext, fakeClone, file, filePath, filesList, index, name, project, projectName, projectURI, rootStoreURI, srcProjectName, strinfigiedProject, _ref,
        _this = this;
      srcProjectName = srcProject.name;
      fakeClone = function(project, newName) {
        var clonedProject, pfile, _i, _len, _ref;
        clonedProject = new Project({
          name: newName
        });
        _ref = project.rootFolder.models;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pfile = _ref[_i];
          clonedProject.addFile({
            name: pfile.name,
            content: pfile.content
          });
        }
        return clonedProject;
      };
      projectName = "autosave";
      project = fakeClone(srcProject, projectName);
      this.lib.add(project);
      this._addToProjectsList(projectName);
      projectURI = "" + this.storeURI + "-" + projectName;
      rootStoreURI = "" + projectURI + "-files";
      filesList = [];
      _ref = project.rootFolder.models;
      for (index in _ref) {
        file = _ref[index];
        name = file.name;
        content = file.content;
        filePath = "" + rootStoreURI + "-" + name;
        ext = name.split('.').pop();
        localStorage.setItem(filePath, JSON.stringify(file.toJSON()));
        filesList.push(file.name);
        file.trigger("save");
      }
      localStorage.setItem(rootStoreURI, filesList.join(","));
      attributes = _.clone(project.attributes);
      for (attrName in attributes) {
        attrValue = attributes[attrName];
        if (__indexOf.call(project.persistedAttributeNames, attrName) < 0) {
          delete attributes[attrName];
        }
      }
      strinfigiedProject = JSON.stringify(attributes);
      localStorage.setItem(projectURI, strinfigiedProject);
      return this.vent.trigger("project:autoSaved");
    };

    YouMagineStore.prototype.loadProject = function(projectName, silent) {
      var content, d, fileName, fileNames, onProjectLoaded, project, projectURI, rootStoreURI, _i, _len,
        _this = this;
      if (silent == null) {
        silent = false;
      }
      d = $.Deferred();
      project = new Project({
        name: projectName
      });
      project.collection = this.lib;
      projectURI = "" + this.storeURI + "-" + projectName;
      rootStoreURI = "" + projectURI + "-files";
      project.rootFolder.sync = project.sync;
      project.rootFolder.changeStorage("localStorage", new Backbone.LocalStorage(rootStoreURI));
      onProjectLoaded = function() {
        var thumbNailFile;
        thumbNailFile = project.rootFolder.get(".thumbnail.png");
        if (thumbNailFile != null) {
          project.rootFolder.remove(thumbNailFile);
        }
        project._clearFlags();
        project.trigger("loaded");
        if (!silent) {
          _this.vent.trigger("project:loaded", project);
        }
        return d.resolve(project);
      };
      project.dataStore = this;
      fileNames = this._getProjectFiles(projectName);
      for (_i = 0, _len = fileNames.length; _i < _len; _i++) {
        fileName = fileNames[_i];
        console.log(fileName, ' is being filtered ==++++++++++==');
        content = this._readFile(projectName, fileName);
        if (fileName.substr(0, 7) === 'http://' || fileName.substr(0, 8) === 'https://') {
          console.log(fileName, 'before');
          fileName = fileName.split('/')[fileName.split('/').length - 1];
          console.log(fileName, 'after');
        }
        project.addFile({
          content: content,
          name: fileName
        });
      }
      onProjectLoaded();
      return d;
    };

    YouMagineStore.prototype.deleteProject = function(projectName) {
      var d, file, fileName, fileNames, fileUri, filesURI, project, projectURI, rootStoreURI, _i, _len;
      d = $.Deferred();
      console.log("browser storage deletion of " + projectName);
      project = this.lib.get(projectName);
      projectURI = "" + this.storeURI + "-" + projectName;
      rootStoreURI = "" + projectURI + "-files";
      file = null;
      filesURI = "" + projectURI + "-files";
      console.log("filesURI " + filesURI);
      fileNames = localStorage.getItem(filesURI);
      console.log("fileNames " + fileNames);
      if (fileNames) {
        fileNames = fileNames.split(',');
        for (_i = 0, _len = fileNames.length; _i < _len; _i++) {
          fileName = fileNames[_i];
          fileUri = "" + rootStoreURI + "-" + fileName;
          console.log("deleting " + fileUri);
          localStorage.removeItem(fileUri);
        }
      }
      this._removeFromProjectsList(projectName);
      this.lib.remove(project);
      return d.resolve();
    };

    YouMagineStore.prototype.renameProject = function(oldName, newName) {
      var project, projectURI, rootStoreURI;
      project = this.lib.get(oldName);
      this.lib.remove(project);
      project.name = newName;
      projectURI = "" + this.storeURI + "-" + newName;
      project.localstorage = new Backbone.LocalStorage(projectURI);
      rootStoreURI = "" + projectURI + "-files";
      project.rootFolder.changeStorage("localStorage", new Backbone.LocalStorage(rootStoreURI));
      project.save();
      return this.lib.add(project);
    };

    YouMagineStore.prototype.destroyFile = function(projectName, fileName) {
      return this._removeFile(projectName, fileName);
    };

    YouMagineStore.prototype._removeFromProjectsList = function(projectName) {
      var index, projectURI, projects, rootStoreURI;
      projects = localStorage.getItem(this.storeURI);
      if (projects != null) {
        projects = projects.split(',');
        index = projects.indexOf(projectName);
        if (index !== -1) {
          projects.splice(index, 1);
          if (projects.length > 0) {
            projects = projects.join(',');
          } else {
            projects = "";
          }
          localStorage.setItem(this.storeURI, projects);
          index = this.projectsList.indexOf(projectName);
          this.projectsList.splice(index, 1);
          console.log("projectName");
          projectURI = "" + this.storeURI + "-" + projectName;
          rootStoreURI = "" + projectURI + "-files";
          localStorage.removeItem(rootStoreURI);
          return localStorage.removeItem(projectURI);
        }
      }
    };

    YouMagineStore.prototype._addToProjectsList = function(projectName) {
      var projects;
      projects = localStorage.getItem(this.storeURI);
      if (projects != null) {
        if (projects === "") {
          projects = "" + projectName;
        } else {
          projects = projects.split(',');
          if (!(__indexOf.call(projects, projectName) >= 0)) {
            projects.push(projectName);
            projects = projects.join(',');
          }
        }
      } else {
        projects = "" + projectName;
      }
      this.projectsList.push(projectName);
      return localStorage.setItem(this.storeURI, projects);
    };

    YouMagineStore.prototype._removeFile = function(projectName, fileName) {
      var fileNames, fileURI, filesURI, index, projectURI;
      projectURI = "" + this.storeURI + "-" + projectName;
      filesURI = "" + projectURI + "-files";
      fileNames = localStorage.getItem(filesURI);
      fileNames = fileNames.split(',');
      index = fileNames.indexOf(fileName);
      fileNames.splice(index, 1);
      fileNames = fileNames.join(',');
      localStorage.setItem(filesURI, fileNames);
      fileURI = "" + filesURI + "-" + fileName;
      return localStorage.removeItem(fileURI);
    };

    YouMagineStore.prototype._getProjectFiles = function(projectName) {
      var fileNames, filesURI, projectURI;
      projectURI = "" + this.storeURI + "-" + projectName;
      filesURI = "" + projectURI + "-files";
      fileNames = localStorage.getItem(filesURI);
      if (fileNames === null) {
        console.log("need to fetch the file info from YM.");
        return this._fetchFileListForDesign(projectName);
      } else {
        fileNames = fileNames.split(',');
      }
      return fileNames;
    };

    YouMagineStore.prototype._fetchFileListForDesign = function(designSlug) {
      var req, url,
        _this = this;
      console.log("fetching file list for " + designSlug + " synchronously...");
      jQuery.ajaxSetup({
        async: false
      });
      url = "" + this.apiURL + "/designs/" + designSlug + "/documents.json";
      console.log("url = " + url);
      req = $.getJSON(url, {
        auth_token: this.token
      }, function(data, resp) {
        var design, num, _results;
        window.myData = [];
        _results = [];
        for (num in data) {
          design = data[num];
          console.log('design', design);
          _results.push(window.myData.push(design.file.url));
        }
        return _results;
      });
      console.log("fetched list: ", window.myData);
      jQuery.ajaxSetup({
        async: true
      });
      return window.myData;
    };

    YouMagineStore.prototype._readFile = function(projectName, fileName) {
      var fileData, fileNames, fileUri, filesURI, newUrl, projectURI, rawData, req, serializer, str,
        _this = this;
      projectURI = "" + this.storeURI + "-" + projectName;
      filesURI = "" + projectURI + "-files";
      fileNames = localStorage.getItem(filesURI);
      if (fileNames !== null) {
        fileNames = fileNames.split(',');
        if (__indexOf.call(fileNames, fileName) >= 0) {
          fileUri = "" + filesURI + "-" + fileName;
          fileData = localStorage.getItem(fileUri);
          rawData = JSON.parse(fileData);
          console.log("raw file Data", rawData);
          return rawData["content"];
        } else {
          throw new Error("no such file");
        }
      } else {
        console.log('---------fetching file from youmagine -------');
        jQuery.ajaxSetup({
          async: false
        });
        newUrl = "http://my.ultimaker.net/tests/myproxy/?url=" + escape(fileName);
        req = $.get(newUrl, null, function(data, resp) {
          window.myData = data;
          return console.log('design data:', data);
        });
        console.log("fetched list: ", window.myData);
        jQuery.ajaxSetup({
          async: true
        });
        serializer = new XMLSerializer();
        str = serializer.serializeToString(window.myData);
        console.log(str);
        return str;
      }
    };

    YouMagineStore.prototype._sourceFetchHandler = function(_arg) {
      var deferred, file, getContent, index, namespaced, path, project, projectName, result, shortName, store, _ref, _ref1,
        _this = this;
      store = _arg[0], projectName = _arg[1], path = _arg[2], deferred = _arg[3];
      if (store !== "browser") {
        return null;
      }
      result = "";
      if ((projectName == null) && (path != null)) {
        shortName = path;
        file = this.project.rootFolder.get(shortName);
        result = file.content;
        return result = "\n" + result + "\n";
      } else if ((projectName != null) && (path == null)) {
        console.log("will fetch project " + projectName + "'s namespace");
        project = this.getProject(projectName);
        console.log(project);
        namespaced = {};
        _ref = project.rootFolder.models;
        for (index in _ref) {
          file = _ref[index];
          namespaced[file.name] = file.content;
        }
        namespaced = "" + projectName + "={";
        _ref1 = project.rootFolder.models;
        for (index in _ref1) {
          file = _ref1[index];
          namespaced += "" + file.name + ":'" + file.content + "'";
        }
        namespaced += "}";
        return result = namespaced;
      } else if ((projectName != null) && (path != null)) {
        console.log("will fetch " + path + " from " + projectName);
        getContent = function(project) {
          project.rootFolder.fetch();
          file = project.rootFolder.get(path);
          result = file.content;
          result = result.replace(/(?!\s*?#)(?:\s*?include\s*?)(?:\(?\"([\w\//:'%~+#-.*]+)\"\)?)/g, function(match, matchInner) {
            var includeFull;
            includeFull = matchInner.toString();
            return "\ninclude(\"browser:" + projectName + "/" + includeFull + "\")\n";
          });
          result = "\n" + result + "\n";
          return deferred.resolve(result);
        };
        return this.loadProject(projectName, true).done(getContent);
      }
    };

    YouMagineStore.prototype._getAllProjectsHelper = function() {
      var item, key, projData, projectName, projects;
      projects = [];
      console.log("localStorage", localStorage);
      for (item in localStorage) {
        key = localStorage[item];
        projData = item.split("-");
        if (projData[0] === "projects") {
          console.log("item", item);
          projectName = projData[1];
          if (projectName != null) {
            if (__indexOf.call(projects, projectName) < 0) {
              projects.push(projectName);
            }
          }
        }
      }
      return console.log("projects", projects.join(","));
    };

    return YouMagineStore;

  })(Backbone.Model);
  return YouMagineStore;
});
