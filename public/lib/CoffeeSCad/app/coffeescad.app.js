// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var $, CoffeeScadApp, MenuView, ModalRegion, Project, ProjectBrowserView, ProjectManager, Settings, SettingsView, marionette, vent, _;

  $ = require('jquery');
  _ = require('underscore');
  marionette = require('marionette');
  vent = require('core/messaging/appVent');
  MenuView = require('./core/menuView');
  ModalRegion = require('./core/utils/modalRegion');
  Project = require('./core/projects/project');
  ProjectBrowserView = require('./core/projects/projectBrowseView');
  ProjectManager = require('./core/projects/projectManager');
  Settings = require('./core/settings/settings');
  SettingsView = require('./core/settings/settingsView');
  CoffeeScadApp = (function(_super) {
    __extends(CoffeeScadApp, _super);

    /*
    Main application class, gets instanciated only once on startup
    */


    CoffeeScadApp.prototype.root = "/CoffeeSCad/index.html/";

    CoffeeScadApp.prototype.title = "Coffeescad";

    function CoffeeScadApp(options) {
      this.onInitializeAfter = __bind(this.onInitializeAfter, this);
      this.onProjectLoaded = __bind(this.onProjectLoaded, this);
      this.onSettingsChanged = __bind(this.onSettingsChanged, this);
      this.onSettingsShow = __bind(this.onSettingsShow, this);
      this.onAppClosing = __bind(this.onAppClosing, this);
      this.onStart = __bind(this.onStart, this);
      this._setupKeyboardBindings = __bind(this._setupKeyboardBindings, this);
      this.initLayout = __bind(this.initLayout, this);
      var BomExporter, BrowserStore, DropBoxStore, StlExporter, exporter, name, _ref,
        _this = this;

      CoffeeScadApp.__super__.constructor.call(this, options);
      this.vent = vent;
      this.settings = new Settings();
      this.initSettings();
      this.projectManager = new ProjectManager({
        appSettings: this.settings
      });
      this.editors = {};
      this.exporters = {};
      this.stores = {};
      BomExporter = require('./exporters/bomExporter/bomExporter');
      StlExporter = require('./exporters/stlExporter/stlExporter');
      this.exporters["stl"] = new StlExporter();
      this.exporters["bom"] = new BomExporter();
      DropBoxStore = require('./stores/dropbox/dropBoxStore');
      BrowserStore = require('./stores/browser/browserStore');
      this.stores["Dropbox"] = new DropBoxStore();
      this.stores["browser"] = new BrowserStore();
      $(window).bind('beforeunload', this.onAppClosing);
      this.vent.on("app:started", this.onAppStarted);
      this.vent.on("settings:show", this.onSettingsShow);
      this.vent.on("project:loaded", this.onProjectLoaded);
      _ref = this.exporters;
      for (name in _ref) {
        exporter = _ref[name];
        this.vent.on("" + name + "Exporter:start", (function(name) {
          return function() {
            return _this.exporters[name].start({
              project: _this.project
            });
          };
        })(name));
      }
      this.initPreVisuals();
      this.initData();
      this.initLayout();
    }

    CoffeeScadApp.prototype.initLayout = function() {
      this.menuView = new MenuView({
        stores: this.stores,
        exporters: this.exporters,
        model: this.project
      });
      this.menuView.render();
      return this.menuView.onDomRefresh();
    };

    CoffeeScadApp.prototype.initSettings = function() {
      var setupSettingsBindings,
        _this = this;

      setupSettingsBindings = function() {
        var mySettings;

        _this.initPreVisuals();
        mySettings = _this.settings.getByName("General");
        return mySettings.on("change", _this.onSettingsChanged);
      };
      return this.settings.on("reset", setupSettingsBindings);
    };

    CoffeeScadApp.prototype.initPreVisuals = function() {
      "Initialize correct theme css";      this.theme = this.settings.get("General").get("theme");
      return $("#mainTheme").attr("href", "assets/css/style/coffeescad/bootstrap.css");
    };

    CoffeeScadApp.prototype.initData = function() {
      var index, store, _ref, _results;

      this.projectManager.stores = this.stores;
      this.project = this.projectManager.createProject();
      _ref = this.stores;
      _results = [];
      for (index in _ref) {
        store = _ref[index];
        _results.push(store.authCheck());
      }
      return _results;
    };

    CoffeeScadApp.prototype._setupKeyboardBindings = function() {
      /* 
      @$el.bind 'keydown', 'ctrl+s', ->
        console.log "i want to save a FILE"
        return false
      */

      var _this = this;

      $(document).bind("keydown", "alt+n", function() {
        _this.vent.trigger("project:new");
        return false;
      });
      $(document).bind("keydown", "ctrl+s", function() {
        _this.vent.trigger("project:save");
        return false;
      });
      $(document).bind("keydown", "ctrl+l", function() {
        _this.vent.trigger("project:load");
        return false;
      });
      $(document).bind("keydown", "alt+c", function() {
        _this.vent.trigger("project:compile");
        return false;
      });
      return $(document).bind("keydown", "f4", function() {
        _this.vent.trigger("project:compile");
        return false;
      });
    };

    CoffeeScadApp.prototype.onStart = function() {
      console.log("app started");
      this.visualEditor.start();
      this.codeEditor.start();
      this.hierarchyEditor.start();
      return this.projectManager.start();
    };

    CoffeeScadApp.prototype.onAppStarted = function(appName) {
      return console.log("I see app: " + appName + " has started");
    };

    CoffeeScadApp.prototype.onAppClosing = function() {
      if (this.project.isSaveAdvised) {
        return 'You have unsaved changes!';
      } else {
        this.stores["browser"].deleteProject("autosave");
        return localStorage.setItem("appCloseOk", true);
      }
    };

    CoffeeScadApp.prototype.onSettingsShow = function() {
      var modReg, settingsView;

      settingsView = new SettingsView({
        model: this.settings
      });
      modReg = new ModalRegion({
        elName: "settings",
        large: true
      });
      return modReg.show(settingsView);
    };

    CoffeeScadApp.prototype.onSettingsChanged = function(settings, value) {
      var key, val, _ref, _results;

      _ref = this.settings.get("General").changedAttributes();
      _results = [];
      for (key in _ref) {
        val = _ref[key];
        switch (key) {
          case "theme":
            this.theme = val;
            _results.push($("#mainTheme").attr("href", "assets/css/themes/" + this.theme + "/bootstrap.css"));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    CoffeeScadApp.prototype.onProjectLoaded = function(newProject) {
      console.log("project loaded");
      return this.project = newProject;
    };

    CoffeeScadApp.prototype.onInitializeBefore = function() {
      var CodeEditor, HierarchyEditor, VisualEditor;

      console.log("before init");
      VisualEditor = require('./editors/visualEditor/visualEditor');
      this.visualEditor = new VisualEditor({
        regions: {
          mainRegion: "#visual"
        },
        project: this.project,
        appSettings: this.settings
      });
      CodeEditor = require('./editors/codeEditor/codeEditor');
      this.codeEditor = new CodeEditor({
        regions: {
          mainRegion: "#code"
        },
        project: this.project,
        appSettings: this.settings
      });
      HierarchyEditor = require('./editors/hierarchyEditor/hierarchyEditor');
      this.hierarchyEditor = new HierarchyEditor({
        project: this.project,
        appSettings: this.settings
      });
      return this.settings.fetch();
    };

    CoffeeScadApp.prototype.onInitializeAfter = function() {
      "For exampel here close and 'please wait while app loads' display";      console.log("after init");
      $("#initialLoader").text("");
      return $("#initialLoader").remove();
    };

    return CoffeeScadApp;

  })(Backbone.Marionette.Application);
  return CoffeeScadApp;
});
