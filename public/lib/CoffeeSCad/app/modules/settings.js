// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var $, Backbone, EditorSettings, GeneralSettings, GitHubSettings, GlViewSettings, KeyBindings, LocalStorage, Settings, _;
    $ = require('jquery');
    _ = require('underscore');
    Backbone = require('backbone');
    LocalStorage = require('localstorage');
    GeneralSettings = (function(_super) {

      __extends(GeneralSettings, _super);

      GeneralSettings.prototype.idAttribute = 'name';

      GeneralSettings.prototype.defaults = {
        name: "General",
        title: "General",
        maxRecentFilesDisplay: 5
      };

      function GeneralSettings(options) {
        GeneralSettings.__super__.constructor.call(this, options);
      }

      return GeneralSettings;

    })(Backbone.Model);
    GlViewSettings = (function(_super) {

      __extends(GlViewSettings, _super);

      GlViewSettings.prototype.idAttribute = 'name';

      GlViewSettings.prototype.defaults = {
        name: "GlView",
        title: "3d view",
        csgRenderMode: "onCodeChange",
        csgRenderDelay: 1.0,
        renderer: 'webgl',
        antialiasing: true,
        shadows: true,
        selfShadows: true,
        showAxes: true,
        showGrid: true,
        gridSize: 1000,
        gridStep: 100,
        gridColor: "0xFFFFFF",
        gridOpacity: 0.1,
        showStats: false,
        position: "diagonal",
        projection: "perspective",
        wireframe: false,
        helpersColor: "0xFFFFFF",
        bgColor: "#363335",
        bgColor2: "#363335"
      };

      function GlViewSettings(options) {
        GlViewSettings.__super__.constructor.call(this, options);
      }

      return GlViewSettings;

    })(Backbone.Model);
    EditorSettings = (function(_super) {

      __extends(EditorSettings, _super);

      EditorSettings.prototype.idAttribute = 'name';

      EditorSettings.prototype.defaults = {
        name: "Editor",
        title: "Code editor",
        startLine: 1,
        theme: "default"
      };

      function EditorSettings(options) {
        EditorSettings.__super__.constructor.call(this, options);
      }

      return EditorSettings;

    })(Backbone.Model);
    KeyBindings = (function(_super) {

      __extends(KeyBindings, _super);

      KeyBindings.prototype.idAttribute = 'name';

      KeyBindings.prototype.defaults = {
        name: "Keys",
        title: "Key Bindings",
        "undo": "CTRL+Z",
        "redo": "CTRL+Y"
      };

      function KeyBindings(options) {
        KeyBindings.__super__.constructor.call(this, options);
      }

      return KeyBindings;

    })(Backbone.Model);
    GitHubSettings = (function(_super) {

      __extends(GitHubSettings, _super);

      GitHubSettings.prototype.idAttribute = 'name';

      GitHubSettings.prototype.defaults = {
        name: "Gists",
        title: "Gist integration",
        configured: false
      };

      function GitHubSettings(options) {
        GitHubSettings.__super__.constructor.call(this, options);
      }

      return GitHubSettings;

    })(Backbone.Model);
    Settings = (function(_super) {

      __extends(Settings, _super);

      Settings.prototype.localStorage = new Backbone.LocalStorage("Settings");

      function Settings(options) {
        this.clear = __bind(this.clear, this);

        this.parse = __bind(this.parse, this);

        this.save = __bind(this.save, this);

        this.init = __bind(this.init, this);
        Settings.__super__.constructor.call(this, options);
        this.bind("reset", this.onReset);
        this.init();
      }

      Settings.prototype.init = function() {
        this.add(new GeneralSettings());
        this.add(new GlViewSettings());
        this.add(new EditorSettings());
        this.add(new KeyBindings());
        return this.add(new GitHubSettings());
      };

      Settings.prototype.save = function() {
        return this.each(function(model) {
          return model.save();
        });
      };

      Settings.prototype.parse = function(response) {
        var i, v;
        for (i in response) {
          v = response[i];
          switch (v.name) {
            case "General":
              response[i] = new GeneralSettings(v);
              break;
            case "GlView":
              response[i] = new GlViewSettings(v);
              break;
            case "Editor":
              response[i] = new EditorSettings(v);
              break;
            case "Keys":
              response[i] = new KeyBindings(v);
              break;
            case "Gists":
              response[i] = new GitHubSettings(v);
          }
        }
        return response;
      };

      Settings.prototype.clear = function() {
        return this.each(function(model) {
          return model.destroy();
        });
      };

      Settings.prototype.onReset = function() {
        if (this.models.length === 0) {
          return this.init();
        }
        /*
              console.log "collection reset" 
              console.log @
              console.log "_____________"
        */

      };

      Settings.prototype.byName = function(name) {
        return this.filter(function(setting) {
          return setting.get('name') === name;
        });
      };

      return Settings;

    })(Backbone.Collection);
    return Settings;
  });

}).call(this);
